<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">marijnhaverbeke.nl/blog</title>
  <author>
    <name>Marijn Haverbeke</name>
    <uri>http://marijnhaverbeke.nl/</uri>
  </author>
  <updated>2013-07-08T17:44:14+01:00</updated>
  <id>http://marijnhaverbeke.nl/blog/feed.atom</id>

  <link rel="self" type="application/atom+xml"
        href="http://marijnhaverbeke.nl/blog/feed.atom"/>

  
    
    <entry>
      <title>Tern</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/tern.html"/>
      <id>http://marijnhaverbeke.nl/blog/tern.html</id>
      <updated>2013-04-19T00:00:00+01:00</updated>
      <category term="javascript"/><category term="tern"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>I spend a rather large fraction of my days inside Emacs, writing and
editing JavaScript code. Of this time, a significant amount is spent
doing things that follow patterns. Pattern which, with a little
machine intelligence, could easily be automated.

</p>
<p>Years ago, before accidentally rolling into this JavaScript career, I
mostly programmed Common Lisp. Emacs <a href="http://common-lisp.net/project/slime/">integration</a> for Common
Lisp is divine. It does just about <em>everything</em>, from interactively
exploring and modifying a running system, to debugging, to looking up
documentation for you on the web. But the main two things that made
day-to-day programming in that environment so wonderful were that it
automatically showed me a list of argument names when I was typing
arguments to a function call, and that it allowed me to jump to the
definition of something at a single keystroke (and then jump back to
where I came from at another keystroke). This meant that I hardly ever
had to break my flow to go look up the interface for a function, or
wonder how or where something is implemented.

</p>
<p>One thing about machine intelligence is that machines don&#39;t develop it
spontaneously. Someone has to put in the time to teach them. Since
programming-language geekery is my thing, and having even half-decent
JavaScript integration for my editor would save me a lot of time, I&#39;ve
started exploring this problem.

</p>
<p>Early this year I got a prototype off the ground that did a passable
job at the basic features that I wanted (argument hints,
jump-to-definition, and of course decent auto-completion). Using that
prototype, I duped the <a href="http://indiegogo.com/projects/tern-intelligent-javascript-editing">crowd</a> into kindly spotting me some
money to continue working on it. The result is called <a href="http:/ternjs.net">Tern</a>
(<a href="https://github.com/marijnh/tern">github</a>), which is now an editor-independent static analysis
engine that is being integrated into several different editors.

</p>
<p>In this post, I&#39;ll try to document how Tern works.

</p>
<h2>General approach</h2>
<p>As a first step, Tern parses your code using <a href="acorn.html">Acorn</a>. If it&#39;s not
currently syntactically valid because you are in the middle of editing
it, it still parses it, using the <a href="parse-dammit.html">error-tolerant parser</a> in
Acorn.

</p>
<p>It then, in a first pass, builds up a representation of the scopes in
the program. If we ignore <code>with</code> and some of the nasty behavior of
<code>eval</code> (which Tern does), scopes in JavaScript are entirely static and
trivial to determine. This already gives us enough information to
auto-complete variable names, and jump to the definition of variables.

</p>
<p>But we also want to complete property names, show argument hints, and
jump to the definition of functions and types that are, for example,
stored in a property.

</p>
<p>For this, we need to figure out the types of the program&#39;s elements.
This is the central problem that Tern tries to solve. In a language
like JavaScript, it is a rather challenging problem.

</p>
<h2>Type inference algorithm</h2>
<p>The type inference in Tern is done by a second pass (after the one
that builds up the scopes) over the code. You can picture this pass as
building up a graph that represents the way types flow through the
program.

</p>
<p>Each variable and object property, as well as some kinds of
expressions, will have an <em>abstract value</em> associated with them. This is
a set of types that have been observed for this element. These are the
nodes in the graph. The edges consist of forwarding information. For
example, if the expression <code>y = x</code> is found in the problem, the
abstract value for variable <code>x</code> will be set to propagate all types it
receives to the abstract value of <code>y</code>. Thus, if <code>x</code> is somehow known
to be a string, <code>y</code> will also get type string (but might, depending on
how it is used, receive more types than just that).

</p>
<p>The graph may be initialized from one or more <a href="https://github.com/marijnh/tern/tree/master/defs">definition files</a>,
which are a simple JSON data format that contain information about
global variables and their types. Such files for the basic JavaScript
environment and the interface exposed by browsers are included in the
Tern distribution. These tell Tern that, for example, the <code>parseFloat</code>
global holds a function type of one string argument that returns a
number.

</p>
<p>Let&#39;s see what the graph would look like for this pointless program.

</p>
<pre><code class="lang-javascript"><span class="cm-keyword">var</span> <span class="cm-variable">x</span> = <span class="cm-variable">Math</span>.<span class="cm-property">E</span>;
<span class="cm-keyword">var</span> <span class="cm-variable">y</span> = <span class="cm-variable">x</span>;
<span class="cm-keyword">var</span> <span class="cm-variable">z</span>;
<span class="cm-variable">x</span> = <span class="cm-string">&quot;hello&quot;</span>;</code></pre>
<p><img src="res/tern_simple_graph.png" alt="A trivial type graph" style="margin: 1em 0"/>

</p>
<p>You see blue circles that represent the abstract values for our three
variables and for the <code>Math.E</code> property. The orange boxes are actual
types. The basic ECMAScript definition file has given <code>Math.E</code> the
type number. Since it is then assigned to <code>x</code>, an edge is added from
<code>Math.E</code> to <code>x</code>, which causes <code>x</code> to also get the number type. <code>y</code> is
initialized to <code>x</code> so it gets all of <code>x</code>&#39;s types. When <code>x</code> is assigned
a string value, the string type flows into it and, consequently, also
into <code>y</code>. The variables now have both the string and number type
associated with them.

</p>
<p>Variable <code>z</code> is never written to or read, so it just sits there sadly
in its corner, without any connection to the rest of the program, and
its abstract value remains empty.

</p>
<p>Note that in actually executing this program, <code>x</code> would end up with a
string and <code>y</code> would still be simply a number. Tern ignores control
flow and pretends everything in the program happens, basically, at the
same point in time. This is an approximation that&#39;s not correct, but
that makes the graphs a lot easier and cheaper to construct. For
typical programs, it doesn&#39;t have much of an adverse effect on the
quality of the inference.

</p>
<p>Propagation of types is not always direct. In many cases, the
algorithm will assign a specific propagation strategy, which may
contain arbitrary code, to handle types that appear in a source
abstract value.

</p>
<p>The most common case of this is function calls. For every function
call in the program, a propagation strategy object is created that
knows the arguments that were passed to the function, and has an
abstract value that represents the result type of the call. The type
of the callee is set to propagate to this object. When it receives a
function type, it will set the argument types of the call to propagate
to the argument variables of the function type, and set the return
type of the function type to propagate to the call&#39;s result type.

</p>
<p>This means that function types must hold references to the abstract
values for their argument variables, and for an abstract value that
represents their return type. (And, in fact, another one that
represents their <code>this</code> type, though we&#39;ll ignore that in the next
example.)

</p>
<pre><code class="lang-javascript"><span class="cm-keyword">function</span> <span class="cm-variable">foo</span>(<span class="cm-def">x</span>, <span class="cm-def">y</span>) { <span class="cm-keyword">return</span> (<span class="cm-variable-2">x</span> + <span class="cm-variable-2">y</span>); }
<span class="cm-keyword">function</span> <span class="cm-variable">bar</span>(<span class="cm-def">a</span>, <span class="cm-def">b</span>) { <span class="cm-keyword">return</span> <span class="cm-variable">foo</span>(<span class="cm-variable-2">b</span>, <span class="cm-variable-2">a</span>); }
<span class="cm-keyword">var</span> <span class="cm-variable">quux</span> = <span class="cm-variable">bar</span>(<span class="cm-string">&quot;goodbye&quot;</span>, <span class="cm-string">&quot;hello&quot;</span>);</code></pre>
<p><img src="res/tern_graph.png" alt="A more complicated type graph" style="margin: 1em 0"/>

</p>
<p>You can see the function types, as orange boxes, containing
(references to) abstract values. Function declarations will cause such
types to be created, and added to the variable that names the
function. The purple boxes are propagation strategies. There are two
calls in the program, corresponding to the two purple call boxes. At
the top is a simple box that handles the <code>+</code> operator. If a string is
propagated to it, it&#39;ll output a string type, and if two number types
are received, it&#39;ll output a number type.

</p>
<p>The arrows going into the arguments and coming out of the result type
of the call propagators are added as soon as the call is seen. The
arrows coming out of the arguments and going into the results are
added when an actual function type is found for the callee.

</p>
<p>You can follow the string types that are passed to <code>bar</code> through this
graph, being joined together by the <code>+</code> operator into a single string,
and then flowing back down through the return types and into the
<code>quux</code> variable.

</p>
<p>In this program, every value was used in a single way, causing almost
all the elements to neatly have a single ingoing and a single outgoing
edge. This is not typical for real code. Every assignment to a
variable will add another incoming edge, and every time it is read,
another outgoing edge is added. In a big program, variables that are
referred to a lot will have hundreds of outgoing edges. It very
quickly becomes impossible to visualize the type graphs for real
programs in two dimensions. (I already had to go through three
throw-away sketches before I found a layout for the above graph that
was not a tangled mess of crossing arrows.)

</p>
<p>Tern defines a number of other propagation strategies, handling things
like property reads and writes, and creating instances from
constructors. These work in ways analogous to the call strategy
described above.

</p>
<p>An important feature of these type graphs is that no matter in which
order they are built, the final result will be the same. If you call a
function that is only defined later in the program (or in a file that
is defined later on), your call node will sit there patiently waiting
until a type is propagated to it. And when that finally happens, it&#39;ll
set up the necessary edges in exactly the same way that it would have
done if the function had been seen before the call.

</p>
<h2>Source-less sub-graphs</h2>
<p>One important property of this inference algorithm is that it will
only give types to things when the types are actually observed being
assigned or passed to it. This is fine, most of the time, but can be a
problem for functions that are never called—no types will flow into
the function&#39;s arguments.

</p>
<p>Why would you write a function and never call it? Usually because you
are writing a library.

</p>
<p>Tern doesn&#39;t fundamentally solve this problem, but it uses a trick to
be able to show at least something, even for abstract values that
don&#39;t have any definite value. By looking at the propagations made
from an abstract value, it is often possible to get some clue on the
way it is used. If, for example, it is propagated to a variable that
usually holds numbers, it might just be a number. If its <code>charCodeAt</code>
property was accessed and the only type we know of with a <code>charCodeAt</code>
property is the built-in string type, it&#39;s probably supposed to be a
string.

</p>
<p>Guessed types are not added to the actual type graph. They are only
returned when directly asking for the type of an abstract value that
has no known type. This means that if you have a function like this...

</p>
<pre><code class="lang-javascript"><span class="cm-keyword">function</span> <span class="cm-variable">gurble</span>(<span class="cm-def">frobs</span>) {
  <span class="cm-keyword">return</span> <span class="cm-variable-2">frobs</span>.<span class="cm-property">reduceRight</span>(<span class="cm-keyword">function</span>() { <span class="cm-comment">/* ... */</span> }, <span class="cm-number">0</span>);
}</code></pre>
<p>... Tern will consider the <code>frobs</code> argument to be an array when
displaying argument hints, but <em>won&#39;t</em> actually propagate anything to
the return type, because it isn&#39;t sure (and once a type is propagated
into the graph, there&#39;s no way to un-propagate it).

</p>
<h2>Run-time type construction</h2>
<p>Here&#39;s a pattern that&#39;s relatively common in JavaScript code:

</p>
<pre><code class="lang-javascript"><span class="cm-keyword">function</span> <span class="cm-variable">extend</span>(<span class="cm-def">proto</span>, <span class="cm-def">props</span>) {
  <span class="cm-keyword">function</span> <span class="cm-def">Ctor</span>() {}
  <span class="cm-variable-2">Ctor</span>.<span class="cm-property">prototype</span> = <span class="cm-variable-2">proto</span>;
  <span class="cm-keyword">var</span> <span class="cm-def">obj</span> = <span class="cm-keyword">new</span> <span class="cm-variable-2">Ctor</span>();
  <span class="cm-keyword">if</span> (<span class="cm-variable-2">props</span>) <span class="cm-keyword">for</span> (<span class="cm-keyword">var</span> <span class="cm-def">prop</span> <span class="cm-keyword">in</span> <span class="cm-variable-2">props</span>) <span class="cm-variable-2">obj</span>[<span class="cm-variable-2">prop</span>] = <span class="cm-variable-2">props</span>[<span class="cm-variable-2">prop</span>];
  <span class="cm-keyword">return</span> <span class="cm-variable-2">obj</span>;
}</code></pre>
<p>This creates a new object that extends another object with some new
properties.

</p>
<p>The type of the resulting object is not &#39;visible&#39; in the source code.
It is dynamically created at run-time. Yet, if a piece of code uses
this pattern to set up its types, Tern will completely fail to
understand it unless it can properly interpret what the code is doing.

</p>
<p>And now we&#39;re off into dodgy hack land. In order to meet this
challenge, Tern uses a special treatment for <code>for</code>/<code>in</code> loops that
appear to be copying properties. When it encounters them, it assumes
that the properties from the source object will be copied to the
target object. It ignores control flow (conditionals and such) and
simply copies <em>all</em> properties.

</p>
<p>That solves half the problem. Now if you call <code>extend</code> once, it will
create a new object type at the <code>new</code> expression, copy in the
properties from <code>props</code>, and return it, resulting in more or less the
type you&#39;d expect.

</p>
<p><em>But</em>, if you create multiple types using <code>extend</code>, you&#39;ll run into
another problem. All of them will have the return type of <code>extend</code>
flow into them, and the return type of <code>extend</code> will be all of them (a
function has a single abstract value representing its return type).
Thus, you&#39;ll end up with a useless mess that will have little to do
with your intended object types.

</p>
<p>To fix that, Tern uses a heuristic to determine whether a function is
a type manipulating function, and if it decides that it is, its return
type will be computed in a different way. Instead of building a type
graph for the function&#39;s content once, and connecting that to all
argument and return types, the function is &#39;reinterpreted&#39; for every
call site, creating propagations only for the current arguments and
return type.

</p>
<p>(Conceptually, <em>all</em> functions that aren&#39;t recursive could be
interpreted this way. It would probably produce superior results, but
also be much, much more expensive.)

</p>
<p>The heuristic to determine whether a function manipulates types or not
is rather superficial, and will only catch the pattern in the example
above and a few similar things. Every time a function assigns to a
<code>prototype</code> property, instantiates a locally defined constructor, or
copies properties in a <code>for</code>/<code>in</code> loop, a score is incremented. When
this score, divided by the size of the function, crosses some
arbitrary threshold, the function is marked as a type manipulator.

</p>
<h2>Generic functions</h2>
<p>The previous section already mentions how Tern&#39;s model of representing
the return type of a function with a single abstract value can lead to
bad results. A similar issue is seen with functions like this:

</p>
<pre><code class="lang-javascript"><span class="cm-keyword">function</span> <span class="cm-variable">randomElement</span>(<span class="cm-def">arr</span>) {
  <span class="cm-keyword">return</span> <span class="cm-variable-2">arr</span>[<span class="cm-variable">Math</span>.<span class="cm-property">floor</span>(<span class="cm-variable">Math</span>.<span class="cm-property">random</span>() * <span class="cm-variable-2">arr</span>.<span class="cm-variable">length</span>)];
}</code></pre>
<p>If you first pass it an array of numbers, and then an array of
booleans, the number and boolean types will both be flowing into the
result of any call site of the function.

</p>
<p>To gracefully deal with functions like this, Tern tries to determine,
after it analyzed a function, whether it is a generic function that
has a return type that directly depends on its input type. To do this,
it again makes use of the type graph, by performing a graph search
trying to find a path from one of the arguments to the return type. It
doesn&#39;t search very deep, since that&#39;d quickly get expensive, but for
example the <code>randomElement</code> function above has a simple path from
<code>arr</code>, though a propagation object that propagates the element type of
the array, to the return type.

</p>
<p>For calls to <code>randomElement</code>, instead of propagating from the
function&#39;s return type abstract value, we simply take the element type
of the type (or types) of the first argument, and use that. This&#39;ll
correctly type <code>randomElement([true])</code> as a boolean, and
<code>randomElement([1])</code> as a number.

</p>
<h2>The server</h2>
<p>The inference engine makes up most of complexity of the project. But
above it is another layer, the layer that most client code talks to,
which is not entirely trivial. In order to support an editor, we must
also be able to maintain an up-to-date view on a code base as it is
being edited.

</p>
<p>This is where the server component comes in. It keeps track of a set
of files, analyzes them, and answers queries about the code. Here&#39;s an
example of a request to a Tern server (requests are <a href="http://json.org/">JSON</a>
documents):

</p>
<pre><code class="lang-javascript">{
  <span class="cm-string">&quot;query&quot;</span>: {
    <span class="cm-string">&quot;type&quot;</span>: <span class="cm-string">&quot;completions&quot;</span>,
    <span class="cm-string">&quot;file&quot;</span>: <span class="cm-string">&quot;myfile.js&quot;</span>,
    <span class="cm-string">&quot;end&quot;</span>: <span class="cm-number">20</span>
  },
  <span class="cm-string">&quot;files&quot;</span>: [
    {
      <span class="cm-string">&quot;type&quot;</span>: <span class="cm-string">&quot;full&quot;</span>,
      <span class="cm-string">&quot;name&quot;</span>: <span class="cm-string">&quot;myfile.js&quot;</span>,
      <span class="cm-string">&quot;text&quot;</span>: <span class="cm-string">&quot;var foo = document.f&quot;</span>
    }
  ]
}</code></pre>
<p>It uploads a small file to the server, and asks for completions at
character position 20. The server might respond with:

</p>
<pre><code class="lang-javascript">{
  <span class="cm-string">&quot;completions&quot;</span>: [<span class="cm-string">&quot;firstChild&quot;</span>, <span class="cm-string">&quot;forms&quot;</span>],
  <span class="cm-string">&quot;start&quot;</span>: <span class="cm-number">19</span>,
  <span class="cm-string">&quot;end&quot;</span>: <span class="cm-number">20</span>
}</code></pre>
<p>Your editor could then use this information to provide actual
auto-completion.

</p>
<p>The <code>query</code>/<code>files</code> format for request is intended to make it easy for
editor plugins to update the server&#39;s view of the code as they are
making requests. The server will save the files, so that if multiple
requests are made without the document changing, there&#39;s no need to
re-upload the code again and again.

</p>
<p>There is also support for sending only a fragment of a file, providing
some context for the request but requiring this fragment to be
analyzed in the context of a previously built up type graph and scope
tree for the whole file. This is useful when dealing with big
files—analyzing 6000 lines of code can take up to 300 milliseconds,
which is too much for an interactive interface. If the 6000 lines were
analyzed in advance, in the background, and when auto-completion is
triggered, only the 100 or so lines around the cursor are sent to be
re-parsed and re-analyzed, the server can usually respond in under 30
milliseconds.

</p>
<p>Another responsibility of the server is managing plugins that
influence the way files are loaded. There are currently plugins for
<a href="http://requirejs.org/">RequireJS</a> and <a href="http://nodejs.org/">node.ns</a>, which will automatically try
to load dependencies, so that modules loaded through <code>define</code> or
<code>require</code> will have their types understood by Tern.

</p>
<h2>Related work</h2>
<p>In closing, I want to give a quick overview of related work. This list
is incomplete. There are tools (such as <a href="http://eclipse.org/vjet/">VJET</a> for Eclipse) on
which I couldn&#39;t find any detailed technical information, and there
are likely others that I am not even aware of. You are encouraged to
write me if you have corrections or additions.

</p>
<h3>Microsoft Visual Studio</h3>
<p>Since VS 11, &#39;Intellisense&#39; for JavaScript is nothing short of
<a href="http://blogs.msdn.com/b/jasonz/archive/2012/05/10/my-favorite-features-improved-tooling-in-visual-studio-11-for-javascript-developers.aspx">amazing</a>. It works, as far as I understand it, by actually
running your code in a magic invisible way, instrumenting the Chakra
engine to ignore I/O and cut off loops that run too long or recursion
that goes too deep, and then inspecting the resulting JavaScript
environment to find out what actual types were created for a given
variable or expression. This makes it amazingly accurate, even when
you&#39;re doing very odd things with your types. Downside is that it&#39;ll
sometimes not be able to run the code that you need a completion for
with its actual input types (it needs to find a code path leading to
that code, which can be tricky), and thus fail to provide completions.

</p>
<p>If you&#39;re curious about this technique, there&#39;s a very watchable
<a href="http://channel9.msdn.com/Events/TechEd/NorthAmerica/2012/DEV308">video</a> of a presentation by Jonathan Carter on this subject.

</p>
<h3>Scripted&#39;s Esprima-based content assist</h3>
<p>The <a href="https://github.com/scripted-editor/scripted">Scriped</a> editor is a relatively new code editor with a
focus on editing JavaScript. It comes bundled with a
<a href="https://github.com/scripted-editor/scripted/tree/master/client/scripts/plugins/esprima">plugin</a> that parses your code and runs a type inference
algorithm on it in order to provide completions. This is similar to
the approach taken by Tern, except that its inference algorithm is
very different. From a quick reading of the code, it appears to be
mostly bottom-up, with a second pass that does some propagation. See
also this <a href="http://contraptionsforprogramming.blogspot.de/2012/11/jsdoc-is-more-than-just-documentation.html">blog post</a>.

</p>
<h3>jsctags and doctorjs</h3>
<p><a href="https://github.com/evilpie/jsctags"><code>jsctags</code></a> is a tool that generates <a href="http://en.wikipedia.org/wiki/Ctags">Ctags</a> files
from JavaScript code. <a href="https://github.com/mozilla/doctorjs"><code>doctorjs</code></a> is a fork of <code>jsctags</code> which
uses a more advanced form of abstract interpretation in its inference
algorithm.

</p>
<p>Both projects have been more or less abandoned, and don&#39;t yield very
good results. They did influence (mostly through Patrick Walton&#39;s
<a href="https://github.com/pcwalton/doctorjsmm"><code>doctorjsmm</code></a> experiment) the design of Tern a lot. But I&#39;ve
always felt that the static, non-interactive way Ctags (or Etags)
work, which undoubtedly made sense back when they were invented, is
awkward and not really appropriate anymore. Tern uses a &#39;live&#39; data
source—a process that updates it analysis as you change the
code—instead.

</p>
<h3>SpiderMonkey&#39;s type inference</h3>
<p>The inference algorithm that <code>doctorjsmm</code> tries to implement is based
on the type inference subsystem of the <a href="http://en.wikipedia.org/wiki/SpiderMonkey">SpiderMonkey</a> JavaScript
engine. Tern&#39;s algorithm is also closely based on this technique
(outlined in <a href="http://rfrn.org/~shu/drafts/ti.pdf">this paper</a>).

</p>
<p>However, a JavaScript compiler and an editing assistance plugin have
quite different goals, and thus also quite different requirements for
their type inference algorithms. SpiderMonkey&#39;s compilation process
has to be lightning fast, and Tern can take (a little) more time if
that happens to improve results. SpiderMonkey has to be conservative,
since producing incorrect information to the compiler might result in
segmentation faults or exploitable bugs in the compiled code. Tern can
more freely use approximations, since getting an inaccurate
auto-completion doesn&#39;t usually cause disaster. And finally,
SpiderMonkey&#39;s type inference can use feedback from the actual running
code. Tern doesn&#39;t run the code, so it doesn&#39;t have that luxury.
</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>Shared documents in CodeMirror</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/codemirror-shared-documents.html"/>
      <id>http://marijnhaverbeke.nl/blog/codemirror-shared-documents.html</id>
      <updated>2013-01-22T00:00:00+01:00</updated>
      <category term="javascript"/><category term="codemirror"/><category term="cm-internals"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>From the very start, CodeMirror was set up as a system with zero
unused abstractions.

</p>
<p>This is a doctrine that I&#39;ve come to esteem highly: write code that
solves the current problem you have, and <em>not</em> a bunch of other,
similar problems that you can imagine someone may have in the future.

</p>
<p>And such a system <em>will</em> have to grow, almost without exception, as
new use cases come up. But I argue that a non-minimal system, no
matter how much time was spent on a genius architecture up front, will
<em>also</em> have to change to deal with new realities. I haven&#39;t yet met an
engineer who was able to accurately predict future uses of her
systems. I certainly can&#39;t. Such a more abstract system would have
more code, and thus more inertia—it takes more work to pull it into a
different direction.

</p>
<p>All code is, in principle, throw-away code. I might not actually throw
it away, but I am prepared to, and fully expecting to, change it in
radical, major ways after I write it. Thus, rather than writing code
in a way that makes it flexible enough to adjust to future
circumstances, I focus on keeping code small and simple enough to
extend it to future circumstances without much effort.

</p>
<p>Of course, as use cases accumulate, systems do get bigger, and
abstractions are built up. But these, all being responses to actual
real-world situations, are adding obvious value to the software. And,
if the use case they address is found to be misguided, or they turn
out to not address it very well, they are pitilessly scrapped and
replaced by improved approaches.

</p>
<h2>The document / editor unit</h2>
<p>So, CodeMirror was set up as a system with zero unused abstractions. A
potentially surprising design decision in the CodeMirror API,
motivated by this principle, is that documents were not separate from
editor instances. For the initial textarea-like use case, this was not
needed. An editor had a single document associated with it, and though
it internally had a specific representation for this document, the
only way the outside world could access it was as simple string data.

</p>
<p>On the bright side, this means, there wasn&#39;t any nonsense like
<code>editor.​getView().​getDocument().​getValue()</code>. You&#39;d simply say
<code>editor.getValue()</code> instead. And that way will remain
supported—interfaces conceived as the simplest thing that solves the
problem tend to be wonderfully straightforward and direct. Adding
features to a system by non-invasively working them into an existing,
simple interface tends to produce better interfaces than directly
exposing an internal model that is more complicated than the typical
use case, forcing users to deal with the indirection even when they
don&#39;t need it.

</p>
<h2>Splitting the document from the editor</h2>
<p>Recently, CodeMirror is coming to the point where it is quite
obviously no longer just a replacement for a textarea. Most users do
use it as such, and it is a design goal to remain frictionlessly
useable in that way. But projects like <a href="http://www.lighttable.com/">Light Table</a> and
<a href="http://brackets.io/">Brackets</a> are full featured code editors, pushing into the same
space as traditional desktop editors.

</p>
<p>And such editors can do things like display multiple views on the same
document. As in, <em>really</em> the same document, not a copy of the
document that&#39;s being kept in sync with some event listeners and some
duct tape. For example, the views should be able to share a single
undo history.

</p>
<p>Another use case that both Light Table and Brackets pushed was being
able to create a subview on a document—show a piece of a bigger
document (say twenty lines out of a thousand line document) in an
editor, keeping them strictly synchronized with the corresponding
range in the parent document.

</p>
<h2>Picking a cutting point</h2>
<p>I mentioned before that, internally, there was already the concept of
a pretty well-separated document data structure. But, in order to make
an interface public, simply making it accessible is rarely the whole
story. You are also, if the interface is any good at all, saying that
the concepts exposed can be recombined in every useful way that the
user can come up with.

</p>
<p>So whereas CodeMirror <em>internally</em> had the invariant that a document
and an editor were married together till death do them part, a public
document / editor interface would have to cater to a much bigger range
of use cases—putting a new document into an editor, sharing documents
between editors (the motivating use case), and all the
consistency-maintenance issues that come with those.

</p>
<p>But, on the flip side, doing the most general thing possible is also
not optimal. Specifically, if the interface is so general that it also
allows nonsensical situations to come up, it&#39;ll force us to write code
to handle these situations. As a concrete example, if editors and
documents are separate, should we allow editors without documents to
be created? My answer is <em>no</em>, we most certainly should not. Such an
editor would be in a thoroughly exceptional, yet more or less useless
state. A whole bunch of assumptions about CodeMirror instances (that
you can call <code>getValue()</code> on them, for example) would not hold for
such editors. Or, we&#39;d have to write special-cased code to somehow
make them hold (<code>if (nodoc) return &quot;&quot;</code>). That would bloat the library,
introduce lots of interesting new potential bugs, and generally waste
everybody&#39;s time.

</p>
<p>Thus, the trick is to move the interface towards something that&#39;s
flexible enough, but not too flexible. And also to stay backwards
compatible with the existing, straightforward API.

</p>
<p>I went back and forth a few times, started on a few implementations
that I had to back-track from, but feel I did find something
satisfactory in the end.

</p>
<p>One initial idea that I gave up is that documents and views should be
different concepts. That sounds obvious, doesn&#39;t it? A view would have
a scrolling position, a cursor position, and a document. A document
would just be text. Separating responsibilities, and all that.

</p>
<p>But merging the two allows us to establish some invariants, such that
a document always has a cursor position associated with it, and
invariants, when they don&#39;t get in the way, are <em>good</em> for software.
It also cuts down a whole layer of cruft in the interface that users
have to deal with. And the only cost is that, for the rare case where
you don&#39;t need a selection or scroll position to be tracked for a
specific document, there&#39;ll be a few unused object allocated. Objects
that make up less than a percent of the memory footprint of even a
small-sized document.

</p>
<p>But, you may protest, if the cursor position is associated with the
document, how are you going to have multiple view on a single
document? Good question. The answer involves another non-intuitive
design decision. There are no multiple views on a single document.
Instead, there are &#39;linked&#39; documents—when documents are linked, they
propagate changes made to them to each other, in a way that (barring
bugs in the code or data corruption) ensures they stay 100%
synchronized.

</p>
<p>Having two document representations for what is essentially a single
document sounds sort of wasteful. But if you refer back to the
<a href="codemirror-line-tree.html">entry on CodeMirror&#39;s document representation</a>, you&#39;ll see
that this is a representation designed around the need to index lines
by vertical offset. And those vertical offsets depend on a line&#39;s
visual height. And there is no guarantee that multiple views will
render lines in exactly the same way. Thus, this data structure will
have to be duplicated for each view anyway.

</p>
<p>Having a canonical central data structure, when each view needs its
own height index, is mostly an extra waste of memory. Since these
height indices can <em>share</em> the actual string values that represent the
document&#39;s content, their memory overhead is reasonable.

</p>
<h2>The undo history dilemma</h2>
<p>Earlier, I mentioned shared undo histories in the context of
split-view / shared-document situations. In a classical split view,
you see two copies of the same document, side by side, and as you make
a change on one side, it appears on the other side. And when you then
move your focus to the other view and toggle undo, the common
expectation is that that will undo the last change you made, in any
view, rather than the last change you made in the view where you
issued the undo command.

</p>
<p>Thus, if the two views are showing documents that are linked together,
those documents should share a single undo history.

</p>
<p>Now consider the situation where we create a subview of a large
document, for example, a user issues a command &#39;show-definition-of&#39;,
and we pop up a mini editor at the bottom of the screen that shows the
definition of the thing the cursor was over. This mini editor is a
subview into another open document, which we may have edited before,
or which we may still edit as the mini editor is being shown.

</p>
<p>Now, if you trigger an undo in this mini view, after a change has been
made in another view on that document, at a point that&#39;s not visible
in the mini view, what should happen?

</p>
<p>Most people agreed that silently undoing something in far-away text
that isn&#39;t part of the focused view is usually not a good thing.
Several heuristics were proposed for kinda sorta doing doing the right
thing, but I judged them all too unpredictable and random. Instead,
when you create a linked document by calling the <code>linkedDoc</code> method
on a document, you can specify whether the histories of the existing
document and the newly created one should be shared or not.

</p>
<p>Linked documents without a shared history are slightly tricky. Changes
will propagate from A to B, but without being added to B&#39;s undo
history. An undo history represents change sets that can be applied to
the <em>current</em> document to go back in history (and, potentially, redo
change sets to go forward). But when the current state of the document
isn&#39;t in sync with the top change set in the history, such a change set
can not be cleanly applied. An analogy with git, or other revision
control systems, applies well here. We have a set of patches, and we
want to be absolutely sure that they can actually be applied to our
document without conflicts.

</p>
<p>Thus, to borrow more terminology from git, when a change comes in from
a document that doesn&#39;t share a history with us, we <em>&#39;rebase&#39;</em> our
existing history. This rebasing, in CodeMirror, is a rather simple and
destructive process that simply updates these patches, when they don&#39;t
conflict, to account for changes in line numbers, and when they do
conflict, discards them. Thus, if document A and B are linked without
a shared history, and I edit line 10 in A, and then edit line 10 in B,
my undo event in A will be lost, since it conflicted with a more
recent edit in B.

</p>
<h2>The linkage tree</h2>
<p>Because document links are (exclusively) created by &#39;deriving&#39; a new
document from an existing one, the relations between a set of linked
documents form a tree (and are stored as such). This means that there
are no cyclic links possible, and traversing such a tree, for example
to propagate a change, is easy—just walk the graph, recursing into all
neighbors except for the one we came from.

</p>
<p>It also means that sets of documents with a shared history form
&#39;islands&#39; in the tree. Documents that share history with no one can be
seen as single-document islands. By storing the shared-history flag in
the edges of the graph, it is very easy, when traversing it, to notice
when we are entering another island. This is used by the code to, for
example, know when it should rebase histories when propagating a
change.

</p>
<h2>Subviews</h2>
<p>The linked-document model allows subviews to be modeled in a
straightforward way. When creating a linked document, you can pass a
range of lines in order have the new document only contain a slice of
the original document.

</p>
<p>I opted to make line numbers &#39;cross-document&#39;—meaning that if you
create a subview that contains lines 100 to 120 of some larger
document, the first line of the sub-document will have number 100, not
zero. This removes the invariant that the first line in an editor is
zero, which required some adjustments, but also means that, as a
change propagates between editors, it stays inside the same
&#39;coordinate system&#39;.

</p>
<p>Of course, changes still have to be clipped when they propagate from a
document to a subview of that document. And unfortunately, how to clip
them, when the change overlaps with the boundaries of the subview, is
an underconstrained problem. There are multiple credible solutions.
Underconstrained problems are the worst kind of problems, because
usually, none of the possible solutions are perfect.

</p>
<p>Say, in the example subview that holds lines 100 to 120 of its parent
document, that someone selects lines 0 to 110 in this parent document,
and then pastes a twenty-line replacement. Obviously, the first ten
lines of the subview must be removed, but as for the question whether
the replacement text should end up in full, in part, or not at all in
the subview, there is no correct answer. One outcome could be that the
subview is left only ten lines big (20 to 30, containing the range
that used to be 110 to 120, pre-change), another could be that it
includes the pasted text (spanning line 0 to 30).

</p>
<p>I ended up going with the first solution (not including the inserted
text in the subview), on the intuition that a change that starts or
ends outside of a narrowed subview probably has no business in that
subview. Fortunately, changes like this, that both delete and add
multiple lines, are relatively rare, so people won&#39;t run into my
arbitrary decision very often.

</p>
<h2>Large-scale method delegation</h2>
<p>A lot of methods that used to exist on editor instances, basically
everything that involves document inspection, document modification,
or selection, are now defined on document instances instead. For
backwards-compatibility, and in order to keep the interface easy to
use, I&#39;d like to continue supporting calls of these methods directly
on the editor instance.

</p>
<p>So now there&#39;s a loop in the CodeMirror source that goes over a long
list of method names, and for each of them, adds a method to the
CodeMirror prototype that forwards the call to the editor&#39;s current
document.

</p>
<h2>The goods</h2>
<p>The changes outlined above landed on CodeMirror&#39;s master branch right
after yesterday&#39;s 3.01 release. The updated manual describes them,
specifically in the <a href="http://codemirror.net/doc/manual.html#api_doc">section on document management</a>.

</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>Parsing line noise as JavaScript</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/parse-dammit.html"/>
      <id>http://marijnhaverbeke.nl/blog/parse-dammit.html</id>
      <updated>2013-01-21T00:00:00+01:00</updated>
      <category term="javascript"/><category term="parsing"/><category term="tern"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>I am writing a tool that tries to enhance a JavaScript code editor by
doing some halfway serious static analysis on code, as it is being
written. To analyze code, you&#39;ll want to parse it, because—believe
me—running casual regexps over programs in order to determine their
structure is not a healthy direction to go in. But <em>unfortunately</em>,
code that&#39;s in the process of being written will, most of the time,
not be in a syntactically valid form.

</p>
<p>Thus, the kind of software that usually passes for a parser is not
much help. A typical parser understands it as its responsibility to
diligently check its input for validity, and complain, rather than
return a useful result, when a problem is found.

</p>
<p>That&#39;s not what we want. We need access to an abstract syntax tree,
not an error message.

</p>
<p>One solution that comes to mind is a technique often used by some
compilers: when they come across a syntax error, they&#39;ll report it,
skip forward to a heuristically determined &#39;safe point&#39; (often the
start of the next statement, function, or block) and continue parsing.

</p>
<p>However, skipping forward will drop the current context on the floor.
And since the invalid part of the code is very likely to be the part
that the cursor is currently at, the constructs used near this
position are of great interest. Throwing them out more or less defeats
our purpose.

</p>
<h2>The red marker and eraser approach</h2>
<p>At first, I believed I could cleverly reuse my existing parser by
using the following approach:

</p>
<ul>
<li>Run a regular parse.</li>
<li>When the parser reports an error, first use a pass that tries to
balance braces, brackets, and parenthesis in the file using a simple
tokenizer and some heuristics to determine whether to remove or add
braces at a given point.</li>
<li>After that, when the parser still reports errors, try to blank out
(replace by spaces) the tokens near the errors.</li>
</ul>
<p>That didn&#39;t work out. To make any kind of informed judgement on where
to move braces or how big a range to blank out, you need a lot of
context information. Thus, my &#39;light-weight error fixer&#39; was quickly
growing into a heavy-weight monster, and still pretty ineffective at,
you know, actually getting a file to parse.

</p>
<p>In retrospect, I&#39;m not sure why I ever thought this was a good idea.
I&#39;m just documenting it here to dissuade other people from going down
a similar route.

</p>
<h2>A full, but very open-minded parser</h2>
<p>What worked a lot better, and was actually not that much work in my
case (where the target language is JavaScript, which isn&#39;t a very
complicated language), was to just write a new parser.

</p>
<p>I reused the tokenizer from <a href="acorn.html">Acorn</a>, my JavaScript parser. I also
reused the general structure of the parser, by working from a copy and
then editing that, which saved a lot of work, and, by allowing me to
work from a well-tested algorithm, helped avoid a lot of mistakes.

</p>
<p>The new parser is guided by two principles:

</p>
<ul>
<li>It never raises an error.</li>
<li>When it encounters weird syntax, it tries to sanely interpret as
much of the surrounding (non-weird) syntax as possible (i.e. throw
away as little information as possible).</li>
</ul>
<p>Some of the changes made to the parser were mechanical—simply kill all
code that verifies non-essential properties of the code, for example
whether a labeled <code>break</code> corresponds to a known label. Others added
local heuristics, for example when no <code>while</code> keyword is found after a
<code>do</code> body, simply invent a bogus expression to take the role of the
condition.

</p>
<p>The original parser uses an operator called <code>expect</code> to enforce that
it wants to see a certain kind of token, and raise an error otherwise.
The loose parser uses a similar operator, which, if the token isn&#39;t
there, looks at the next two tokens, and skips forward if one of them
matches. If none match, it&#39;ll just return, not consuming any token—and
the parse continues as if the token was there.

</p>
<p>Using such a careless style of parsing gets you surprisingly far. But
it still leaves open the problem of a missing or superfluous brace
leading to a wildly incorrect interpretation of everything after it.
To get around that, the loose parser relies heavily on indentation to
guide the way it parses blocks. Basically, when a new statement (or
new object property, or new array element) is indented less than the
first one in the block, it assumes that the block (or object literal,
or array) ends there.

</p>
<p>That works very well for properly indented code. But it will go wrong
when indentation is sloppy, or people do cute things like not
indenting their debug statements. This is why the loose parser should
be used as a backup for when the regular parser fails, in order to get
at least <em>some</em> kind of syntax tree, but never as a primary parser.

</p>
<p>Finally, a subtle problem of this parsing strategy—when in doubt,
don&#39;t advance the token stream—is that is very easy to get into
infinite loops. For example, say you&#39;re trying to parse an argument
list, and there&#39;s a bunch of nonsense in the middle such as <code>foo(a, ],
c)</code>. The argument list parser obviously has a loop in it, calling
<code>parseExpression</code> for each argument. When it runs into the <code>]</code>,
<code>parseExpression</code> returns a dummy node, because it couldn&#39;t find any
expression there. The argument list parser then <em>optionally</em> skips a
comma (it parses <code>foo(a c)</code> as <code>foo(a, c)</code>—tolerant as it is), and
continues. If that was all there was to it, the above expression would
land us in an infinite loop.

</p>
<p>To work around that, a few select parts of the parser have special
cased code to ensure that the token stream does, somehow, advance on
every iteration of their loops. For the argument list parser, it will
check that the expression it parsed isn&#39;t a dummy placeholder, and if
it is, discard a token and ignore the dummy expression. This, combined
with the fact that it&#39;ll bail out when it finds a token indented less
than or equal to the line that started the list, makes it return more
or less sane results for most inputs.

</p>
<h2>Get the code</h2>
<p>This new parser is a submodule of my <a href="acorn.html">Acorn</a> parser, and lives in
the <a href="https://github.com/marijnh/acorn/blob/master/acorn_loose.js"><code>acorn_loose.js</code></a> file. If you&#39;ve come up with a use for such
a parser, or just want to see if you can break it, check out the git
repository, and have fun. It runs both in Node and in the browser.
It&#39;s not terribly mature or stable, but it does what it claims to do.

</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>Postmodern 1.19 released</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/postmodern-1.19.html"/>
      <id>http://marijnhaverbeke.nl/blog/postmodern-1.19.html</id>
      <updated>2012-11-28T00:00:00+01:00</updated>
      <category term="common lisp"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p><a href="http://marijnhaverbeke.nl/postmodern">Postmodern</a> is a Common Lisp library for communicating with a
<a href="http://www.postgresql.org/">PostgreSQL</a> database. Sabra Crolleton recently published a nice
<a href="https://sites.google.com/site/sabraonthehill/postmodern-examples">collection of examples</a> for the library. That reminded me that
it&#39;s been over a year since the last release.

</p>
<p>There have been several major improvements, including support for
<a href="http://www.postgresql.org/docs/current/static/libpq-notify.html">notifications</a> and <a href="http://marijnhaverbeke.nl/postmodern/cl-postgres.html#bulk-copying">bulk copying</a>, so a release was in
order, if only to prevent the impression that the library was not
being maintained.

</p>
<p>So there it is, Postmodern version 1.19. Get it from the
<a href="http://marijnhaverbeke.nl/postmodern">project page</a>.
</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>A tale of a pathological scrolling model</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/a-pathological-scrolling-model.html"/>
      <id>http://marijnhaverbeke.nl/blog/a-pathological-scrolling-model.html</id>
      <updated>2012-10-31T00:00:00+01:00</updated>
      <category term="javascript"/><category term="codemirror"/><category term="cm-internals"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>When you&#39;ve lied about something, it tends to take more and more lies
to cover up the discrepancies created by the first lie. A very similar
thing happened when <a href="http://codemirror.net">CodeMirror</a> needed to fake its scrollbars.

</p>
<h2>CodeMirror&#39;s viewport</h2>
<p>First, some background. Why would we want to fake a scrollbar to begin
with?

</p>
<p>In order to remain responsive when huge documents are loaded in,
CodeMirror does not render the whole document, but only the part of it
that is currently scrolled into view. This means that the amount of
DOM nodes it creates is limited by the size of the viewport, and the
browser relayouts triggered by changes to the text are relatively
cheap.

</p>
<p>So if you have a document that is higher than the vertical height of
your editor, the actual DOM inside the editor will be a big, largely
empty <code>div</code> that defines the height (and thus the scrollable area) of
the editor content, with inside of that, absolutely positioned to
cover the part that&#39;s currently scrolled into view, a smaller element
that contains the lines of text that you are looking at (and a slight
margin of a few lines around that).

</p>
<p>When you scroll, you do <em>not</em> want to see a bunch of empty space
coming into view, so the editor has to make sure that, once you&#39;re
scrolling past the viewport margin, it updates the viewport and
renders the content that came into view.

</p>
<p>Unfortunately, browsers fire <code>scroll</code> events <em>after</em> doing the actual
visual scrolling. This means that if you quickly drag the scrollbar,
you&#39;ll see empty space coming into view before the <code>scroll</code> event
handler even has a chance to update the viewport. And that is the
reason for our first lie.

</p>
<h2>To fake a scrollbar</h2>
<p>If the user&#39;s scrolling happens on an element that is not our actual
content container, the scrolling won&#39;t be able to move empty space
into view, but will still fire <code>scroll</code> events (on the other element)
that we can use to update our viewport and <em>then</em> scroll our content
container.

</p>
<p>So, we create a second scrollable element, absolutely position it
where the scrollbar is (hiding the real scrollbar), and put an element
inside of it with its <code>height</code> style set to the same height as the
actual content. Scroll event handlers keep the scrolling position of
the two elements in sync, and fast scrolling with the scrollbar will
go through the dummy element and thus not cause empty space to become
visible.

</p>
<p>There&#39;s some extra machinery needed, for example to make sure the
scrollbar is hidden when the main content is not scrollable, but on
the whole this wasn&#39;t hard to get right.

</p>
<p>Enter OS X Lion.

</p>
<p>Now a widely used platform has scrollbars that hide themselves when
inactive, and are transparent. You can imagine how overlaying a
transparent scrollbar over another one does not create a very
believable effect. The &#39;hidden&#39; scrollbar is still visible, and as you
scroll it slightly lags behind the non-hidden one, looking flaky.

</p>
<p>Which brings us to our next coverup. CodeMirror currently gives its
outer element <code>overflow: hidden</code>, and its scrolling element (which
lives inside of that) a margin of <code>-30px</code> and padding of <code>30px</code> on the
right side and bottom. This will, in effect, clip off its outer right
and bottom edge, without affecting its inner size. Thus, the
scrollbars are now truly hidden.

</p>
<p>If you are thinking I could have hidden the scrollbars by setting
<code>overflow: hidden</code> on the &#39;scrolling&#39; element and faking all
scrolling, you&#39;re right, and we did go down that road at some point,
but see the section on wheel scrolling below—we want the mouse wheel
to scroll this element, and it doesn&#39;t do that for <code>overflow: hidden</code>
nodes.

</p>
<p>This trick forces us to also fake the horizontal scrollbar (it
wouldn&#39;t look right if its rightmost corner was clipped off), but that
follows the same principles as faking the vertical one, and is easy to
do.

</p>
<p>Making scrollbars of different heights correspond to each other is
pretty easy.

</p>
<pre><code>fakeScrollbar.firstChild.style.height = 
  (scroller.scrollHeight - scroller.clientHeight + fakeScrollbar.clientHeight) + &quot;px&quot;;</code></pre>
<p>The <code>firstChild</code> of the fake scrollbar is the element used to force
its height. <code>scroller.scrollHeight - scroller.clientHeight</code> is the
maximum <code>scrollTop</code> of the scrolling container. We want the fake
scrollbar to have the same maximum <code>scrollTop</code> (so that one pixel
scrolled there corresponds to one pixel scrolled in the content), so
we set its scrollable height to this maximum <code>scrollTop</code> plus its own
outer height.

</p>
<p>At one point, I was doing the computation of whether horizontal and
vertical scrollbars were needed, and how high/wide they should be,
myself. But that turned out to be much more error prone than simply
inspecting the scrollable container and using its dimensions
<code>scrollHeight</code>/<code>scrollWidth</code>, which outsources the computation to the
browser. Here it turned out that leaving the scrollable element as
<code>overflow: auto</code> has another advantage—since it will have scrollbars
when scrollable, even though those scrollbars are hidden, the formula
above does not need to take the height of the horizontal scrollbar
into account—if one is needed, the browser will already be showing it
on the scrollable element, and adjust its <code>clientHeight</code> as needed.

</p>
<h2>Wheel scrolling</h2>
<p>I initially believed that wheel scrolling would not be a problem,
since it proceeds in small steps, and thus will never jump over the
margin of the visible viewport.

</p>
<p>Seems I&#39;m not keeping up with technology.

</p>
<p>The old clickety-click style of mouse wheel is only one source of
wheel events. Though no actual wheel is involved, scrolling by
touchpad (or touchscreen) fires the same kind of events, and has the
same kind of direct, scrollbar-less scrolling effect.

</p>
<p>And such interfaces tend to support &#39;throw scrolling&#39;, where if you
scroll quickly and then take your finger(s) off the device, it&#39;ll keep
scrolling for a bit, potentially very fast. Potentially revealing
empty space again.

</p>
<p>So we&#39;ll have to do something about wheel events as well.

</p>
<p>The first, obvious approach was to simply handle the wheel events,
which can be <code>preventDefault</code>-ed to cancel their scrolling effect, do
the scrolling ourselves, and make sure we update the viewport in the
process.

</p>
<p><em>Don&#39;t do that.</em>

</p>
<p>Firstly, <code>mousewheel</code> (and Firefox&#39;s <code>DOMMouseScroll</code>) events come
with a <code>wheelDelta</code> or <code>detail</code> property that indicates the amount
scrolled, but there is no clear relationship between this quantity and
the amount of pixels that the browser would scroll for this event.

</p>
<p>The delta-to-pixel ratios are wildly different across the various
browsers. And not just that. They also vary between versions of
browsers, and between specific versions of a single browser run of
different operating systems. Possibly (though I didn&#39;t reliably verify
that) even between browsers run on different hardware or device
drivers.

</p>
<p>Thus, to know how many pixels you should scroll for a given wheel
event, you&#39;ll need a long list of fragile checks against
<code>navigator.userAgent</code> strings. And, since there is no standard or
default value, you&#39;ll still be defenseless against new versions of
browsers, old versions that you didn&#39;t test, or obscure browsers that
you&#39;ve never heard of.

</p>
<p>And even if you somehow got that right, your scrolling will still not
feel native. Firefox, for example, will smooth-scroll your document as
you scroll with the wheel, but will not fire a wheel event for every
change in the scrolling position. Some browsers appear to use subtle
speedup and smoothing effects in the process of a throw scroll that
are not reflected in the deltas they attach to the events. Thus, wheel
scrolling that we do ourselves is necessarily less smooth than the
native version.

</p>
<p>... I know, there are a bunch of projects out there which <em>do</em> their
own wheel scrolling, and several libraries that claim to &#39;normalize&#39;
wheel events. But these all seem to set the bar for what &#39;normalizing&#39;
means pretty low, since it was trivial to get obviously inconsistent
results from them when testing several browsers and platforms.

</p>
<p>(It would certainly be <em>nice</em> if browsers exposed an API powerful and
standardized enough to simulate wheel scrolling in a solid way. It&#39;s
just that they don&#39;t.)

</p>
<p>So CodeMirror does not override wheel events itself. What then does it
do?

</p>
<h2>Self-adjusting, non-invasive scroll prediction</h2>
<p>It does several things. First, it contains a number of crude,
hard-coded, browser-detected constants to use as a first approximation
of wheel-delta-to-pixels rates.

</p>
<p>Then, it listens to wheel events, but never calls <code>preventDefault</code> on
them or does scrolling in response to them. Instead, it responds by
setting a timeout to observe the amount of pixels that the wheel event
did scroll the content, and uses that to tweak its delta-to-pixel rate
at run-time.

</p>
<p>In addition, it uses its current estimate of this rate to extend the
viewport to cover the area it expects the wheel event to scroll into
view. If it&#39;s wrong, some flickering (visible empty space immediately
replaced by content again) might be noticeable, but it does <em>not</em>
screw up the scrolling experience by hijacking the wheel events.
</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>Overloading plain text: CodeMirror marked ranges</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/codemirror-marked-ranges.html"/>
      <id>http://marijnhaverbeke.nl/blog/codemirror-marked-ranges.html</id>
      <updated>2012-10-30T00:00:00+01:00</updated>
      <category term="javascript"/><category term="codemirror"/><category term="cm-internals"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>One common feature request that CodeMirror version 1 was fundamentally
unable to support (due to its reliance on <code>contentEditable</code>), and
which was thus built into version 2 from the start, is
programmatically styling stretches of text. In version 2, you can call
<code>instance.markText(from, to, className)</code>, and it&#39;ll style that stretch
of text with the given CSS class.

</p>
<p>By version 2.16, it was actually possible to edit the text around and
inside such a marked range without strange corruptions occurring. That
version also added a way to query the marked range for its current
position (if any) within the document.

</p>
<p>Then, last month in version 2.34, marked ranges were integrated with
the undo history, so that if you delete a stretch of text that
contains marked ranges, undoing the deletion will bring back the
ranges, not just the text.

</p>
<p>And last week, prompted by use cases from two different customers, I
decided to add a number of rather radical extensions to this API. In
the current code in the <code>v3</code> (future version 3) branch of the
CodeMirror repository, it is possible to...

</p>
<ul>
<li>Force ranges to be treated as atoms as far as cursor motion is
concerned (the cursor is never inside of them—they are skipped over
by one cursor motion, and deleted by a single backspace action).</li>
<li>Make ranges read-only, so that they can not be deleted from the
document at all.</li>
<li>Collapse ranges, hiding their content.</li>
<li>Replace a (collapsed) range with a widget, which is an arbitrary DOM
node.</li>
<li>Automatically clear (remove) a range when the cursor enters it.</li>
</ul>
<p>The third one (collapsing) was the tricky part. If a range, which may
span multiple lines, can be collapsed, that means that line boundaries
are no longer as absolute as they used to be. If a range spanning the
end of line one and beginning of line two is collapsed, content from
line and line two ends up being rendered on what is visually the same
line.

</p>
<p>This broke a <em>lot</em> of assumptions in the existing code, which required
me to completely rewrite a few pieces of the editor (selection
drawing, character position measurement) and required subtle changes
to many others. The fallout from these extensive changes are probably
going to delay the release of version 3 for another month.

</p>
<p>But it&#39;s worth that!

</p>
<p>For one thing, I could simply drop the old line-folding (hiding)
system and all its interaction with the rest of the system, since
hiding whole lines is simply a special case of hiding arbitrary
stretches of text. I&#39;ve rewritten the code <a href="http://codemirror.net/3/demo/folding.html">folding add-on</a> to
use the new APIs to hide precisely the folded range, and replace it
with a little widget that can be clicked to un-fold the range.

</p>
<p>The use cases that prompted these extensions are actually quite
similar to something that some Emacs packages do: text as a user
interface. If you make some text read-only, insert widgets where
appropriate, and use styling to make it clear which text is editable,
you can provide a rather smooth interface for things like forms,
interactive prompts, or even, if you&#39;re willing to stretch it,
<a href="http://www.opensource.apple.com/source/emacs/emacs-51/emacs/lisp/play/blackbox.el">games</a>.

</p>
<p>And there you have it. My secret ambition is to replace Emacs, at
least for my own use. The concept of writing shells for everything I
do in my text editor appeals to me. But the Emacs way of doing that
is, unfortunately, firmly grounded in the 1980s (or 70s), and shows
few <a href="http://www.emacswiki.org/emacs/DynamicBindingVsLexicalBinding">signs</a> of moving into the 21st century. The APIs are
just to obscure, the <a href="http://www.gnu.org/software/emacs/emacs-lisp-intro/">language</a> too slow, and the ecosystem too
weird for me.

</p>
<p>(A fair number of other parts will have to be put in place for
CodeMirror to be viable as a day-to-day editor, but I&#39;ll talk about
those in some other entry.)

</p>
<p>Obviously, this castle-in-the-sky plan is not the only use case for
the marked range enhancements. As a more concrete example, I hope to
soon write an add-on on top of them that allows you to replace
stretches of text matching a specific pattern with a widget, and then
expand them back to regular text as the user moves the cursor into
them. For example, in a LaTeX document, you could replace sequences
like <code>\epsilon</code> with an actual <code>ε</code> character, and but when you copy a
chunk of text containing that range, you&#39;d still get the original
<code>\epsilon</code> text, and if you move the cursor into it, it expands into
that text and you can edit it at will. So the <em>presentation</em> of the
document can be enhanced, without actually harming its <em>consistency</em>
as a simple editable plain-text document.
</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>Acorn: yet another JavaScript parser</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/acorn.html"/>
      <id>http://marijnhaverbeke.nl/blog/acorn.html</id>
      <updated>2012-10-02T00:00:00+01:00</updated>
      <category term="javascript"/><category term="parsing"/><category term="performance"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>Acorn is a JavaScript parser written in JavaScript.

</p>
<p>Another one.

</p>
<p>Just like:

</p>
<ul>
<li>The original <a href="https://github.com/mishoo/UglifyJS/blob/master/lib/parse-js.js">UglifyJS parser</a></li>
<li>The <em>new</em> <a href="https://github.com/mishoo/UglifyJS2/blob/master/lib/parse.js">UglifyJS parser</a></li>
<li><a href="https://github.com/qfox/ZeParser/blob/master/ZeParser.js">ZeParser</a></li>
<li>The <a href="https://github.com/mozilla/narcissus/blob/master/lib/parser.js">Narcissus project&#39;s parser</a></li>
<li><a href="https://github.com/ariya/esprima/blob/master/esprima.js">Esprima</a></li>
</ul>
<p>Acorn produces a well-documented, widely used <a href="https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API">AST format</a>.
The same as the last two parsers in that list.

</p>
<p>Acorn is really fast. Just like the last one in the list: <a href="https://github.com/ariya/esprima/blob/master/esprima.js">Esprima</a>.

</p>
<p>Acorn is tiny. About half as big as Esprima, in lines of code.

</p>
<p>Still, there&#39;s no good reason for Acorn to exist. Esprima is an
excellent project, well-documented, and small enough for any practical
use. It exposes an interface <em>very</em> similar to Acorn.

</p>
<p>The only reason I wrote Acorn is that small, well-defined systems are
so much fun to work with, and that Esprima&#39;s web page very
triumphantly declared it was faster than <code>parse_js</code>, the
implementation in UglifyJS version 1, which is a port of my own
<a href="http://marijnhaverbeke.nl/parse-js">parse-js</a> Common Lisp library.

</p>
<p>I just <em>had</em> to see if I could do better.

</p>
<p>Turns out I can. Acorn beats Esprima, at least on Chrome, Firefox, and
Opera (I didn&#39;t test other browsers) by a narrow margin—in the 5-20%
range—when not storing source location data, and by a wide one—about
five times faster—when storing source location data. See <a href="http://marijnhaverbeke.nl/acorn/test/bench.html">here</a>
for a reference. That second number is mostly due to the very
unoptimized way in which Esprima manages the flow of this data—it
could probably easily do better.

</p>
<p>To even get to the point where my parser had this small speed
advantage over Esprima, I had to steal some of its tricks. Most
notably, in order to test whether a string is part of a set (of
keyword, reserved words, etcetera), Esprima uses hand-rolled
predicates that use <code>switch</code> statements over the string values, with
an outer <code>switch</code> over the length of the string. Something like this:

</p>
<pre><code class="lang-javascript"><span class="cm-keyword">function</span> <span class="cm-variable">isKeyword</span>(<span class="cm-def">word</span>) {
  <span class="cm-keyword">switch</span> (<span class="cm-variable-2">word</span>.<span class="cm-property">length</span>) {
    <span class="cm-keyword">case</span> <span class="cm-number">2</span>:
      <span class="cm-keyword">switch</span> (<span class="cm-variable-2">word</span>):
        <span class="cm-keyword">case</span> <span class="cm-string">&quot;if&quot;</span>: <span class="cm-keyword">case</span> <span class="cm-string">&quot;in&quot;</span>: <span class="cm-keyword">case</span> <span class="cm-string">&quot;do&quot;</span>: <span class="cm-keyword">return</span> <span class="cm-atom">true</span>;
      }
      <span class="cm-keyword">return</span> <span class="cm-atom">false</span>;
    <span class="cm-keyword">case</span> <span class="cm-number">3</span>:
      <span class="cm-keyword">switch</span> (<span class="cm-variable-2">word</span>):
        <span class="cm-keyword">case</span> <span class="cm-string">&quot;var&quot;</span>: <span class="cm-keyword">case</span> <span class="cm-string">&quot;for&quot;</span>: <span class="cm-keyword">case</span> <span class="cm-string">&quot;new&quot;</span>: <span class="cm-keyword">case</span> <span class="cm-string">&quot;try&quot;</span>: <span class="cm-keyword">return</span> <span class="cm-atom">true</span>;
      }
      <span class="cm-keyword">return</span> <span class="cm-atom">false</span>;
    <span class="cm-keyword">case</span> <span class="cm-number">4</span>:
      <span class="cm-comment">/* et cetera */</span>
  }
}</code></pre>
<p>I initially expected regular expressions to be faster (using the
<code>test</code> method), but it turns out that they only are faster on Chrome,
and there only by a tiny margin.

</p>
<p>But I wasn&#39;t about to write out all these boring predicates myself, so
I defined a function that, given a list of words, builds up the text
for such a predicate automatically, and then <code>eval</code>s it to produce a
function.

</p>
<p>Another big size (and probably speed) saving comes from the fact that
Acorn uses an operator precedence parser, whereas Esprima writes out
all the intermediate forms of binary operators in a long list of
functions named <code>parseMultiplicativeExpression</code>,
<code>parseAdditiveExpression</code>, <code>parseShiftExpression</code>, and so on for all
of the ten precedence levels. Each of these has to be passed through
for each expression parsed.

</p>
<p>I&#39;ve set up a <a href="http://marijnhaverbeke.nl/acorn/">project page</a> for Acorn, which is simply the
output of <a href="http://jashkenas.github.com/docco/">docco</a> run on the source code, and a
<a href="https://github.com/marijnh/acorn/">github page</a> for browsing the code and reporting bugs.

</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>CodeMirror's mode system</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/codemirror-mode-system.html"/>
      <id>http://marijnhaverbeke.nl/blog/codemirror-mode-system.html</id>
      <updated>2012-09-20T00:00:00+01:00</updated>
      <category term="javascript"/><category term="codemirror"/><category term="parsing"/><category term="cm-internals"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>A CodeMirror <em>mode</em> is a module that helps <a href="http://codemirror.net">CodeMirror</a>, a code
editor, highlight and optionally smart-indent text in a specific
programming language or other kind of structured text format.

</p>
<p>Code editors take widely different approaches to the way syntax
highlighting styles are defined. An elegantly simple approach is
outlined in Patrick Walton&#39;s
<a href="https://github.com/mozilla/skywriter/wiki/Common-JavaScript-Syntax-Highlighting-Specification">Common JavaScript Syntax Highlighting Specification</a>,
basically defining a state machine with regular expressions as its
edges. Unfortunately, this proposal was never widely adopted.
<a href="http://ace.ajax.org">ACE</a> uses a similar, though incompatible system. Other, more
heavyweight, and often downright obscure, systems are found in
<a href="http://www.emacswiki.org/emacs/ModeTutorial">Emacs</a>, <a href="http://vimdoc.sourceforge.net/htmldoc/syntax.html#:syn-define">Vim</a>, or <a href="http://kate-editor.org/2005/03/24/writing-a-syntax-highlighting-file/">Kate</a>.

</p>
<h2>The interruptable, resumable parser</h2>
<p>CodeMirror takes its own unconventional approach to mode definition.
It grew more or less organically out of my fondness for crazy hacks at
the time I was <a href="http://codemirror.net/1/story.html">writing the first version of CodeMirror</a>.

</p>
<p>The original approach modeled a mode as a transforming iterator
(iterator in the Python sense)—an iterator that lazily got its input
from another iterator, and outputted some transformed form of this
input. It took the characters in the document as input, and produced a
stream of tokens. Inside this iterator, any amount of state and
complexity could be hidden (the JavaScript mode was, and still is,
almost a full parser).

</p>
<p>To avoid having to re-parse the whole document every time a character
was typed, such iterators had to support a <em>copy</em> operation, which
basically extracted their state so that they could later be restarted
on a new input iterator.

</p>
<p>This was, all in all, a very neat abstraction, and also, from the
outside, easy to work with. Unfortunately such iterators were quite
hard to write, and the <a href="http://bob.ippoli.to/archives/2005/07/06/iteration-in-javascript/">iterator abstraction</a> that was used,
which relies on exceptions to signal end-of-stream, had quite a high
overhead—especially if you stack it several levels deep.

</p>
<h2>Take two: first class state</h2>
<p>CodeMirror 2 addresses those two problems by separating the state from
the iterator. Instead of, in order to maintain, copy, and restore
state, having to perform weird tricks with closures, a mode author now
simply defines a function that initializes the start-of-document
state, and a function that takes such a state, along with a character
stream, and advances the stream past one token, updating its state if
necessary, and returning the style of that token.

</p>
<p>This, while not quite as cute as the &#39;everything is an iterator&#39;
model, makes it much easier to write modes. Not just for people who
aren&#39;t familiar with closures, but also for me. It also makes it much
easier to write performant modes, because the abstractions don&#39;t call
for quite as much indirection.

</p>
<h2>Example</h2>
<p>An example might make this set-up clearer. Here is a very simple mode
that highlights only double-quoted strings (which may span multiple
lines):

</p>
<pre><code class="lang-javascript"><span class="cm-variable">CodeMirror</span>.<span class="cm-property">defineMode</span>(<span class="cm-string">&quot;strings&quot;</span>, <span class="cm-keyword">function</span>() {
  <span class="cm-keyword">return</span> {
    <span class="cm-property">startState</span>: <span class="cm-keyword">function</span>() {<span class="cm-keyword">return</span> {<span class="cm-property">inString</span>: <span class="cm-atom">false</span>};},
    <span class="cm-property">token</span>: <span class="cm-keyword">function</span>(<span class="cm-def">stream</span>, <span class="cm-def">state</span>) {
      <span class="cm-comment">// If a string starts here</span>
      <span class="cm-keyword">if</span> (!<span class="cm-variable-2">state</span>.<span class="cm-property">inString</span> &amp;&amp; <span class="cm-variable-2">stream</span>.<span class="cm-variable">peek</span>() == <span class="cm-string">'&quot;'</span>) {
        <span class="cm-variable-2">stream</span>.<span class="cm-property">next</span>();            <span class="cm-comment">// Skip quote</span>
        <span class="cm-variable-2">state</span>.<span class="cm-property">inString</span> = <span class="cm-atom">true</span>;    <span class="cm-comment">// Update state</span>
      }

      <span class="cm-keyword">if</span> (<span class="cm-variable-2">state</span>.<span class="cm-property">inString</span>) {
        <span class="cm-keyword">if</span> (<span class="cm-variable-2">stream</span>.<span class="cm-property">skipTo</span>(<span class="cm-string">'&quot;'</span>)) { <span class="cm-comment">// Quote found on this line</span>
          <span class="cm-variable-2">stream</span>.<span class="cm-property">next</span>();          <span class="cm-comment">// Skip quote</span>
          <span class="cm-variable-2">state</span>.<span class="cm-property">inString</span> = <span class="cm-atom">false</span>; <span class="cm-comment">// Clear flag</span>
        } <span class="cm-keyword">else</span> {
           <span class="cm-variable-2">stream</span>.<span class="cm-property">skipToEnd</span>();    <span class="cm-comment">// Rest of line is string</span>
        }
        <span class="cm-keyword">return</span> <span class="cm-string">&quot;string&quot;</span>;          <span class="cm-comment">// Token style</span>
      } <span class="cm-keyword">else</span> {
        <span class="cm-variable-2">stream</span>.<span class="cm-property">skipTo</span>(<span class="cm-string">'&quot;'</span>) || <span class="cm-variable-2">stream</span>.<span class="cm-property">skipToEnd</span>();
        <span class="cm-keyword">return</span> <span class="cm-atom">null</span>;              <span class="cm-comment">// Unstyled token</span>
      }
    }
  };
});</code></pre>
<p>Let&#39;s quickly walk through it. <code>CodeMirror.defineMode</code> registers a
mode under a given name. It registers a constructor function to allow
configuring the mode when loading it (which this trivial mode doesn&#39;t
use).

</p>
<p>The mode constructor returns an object containing the functions that
make up this mode. This one defines only <code>startState</code> and <code>token</code>,
others often define more, for example <code>indentation</code> to derive the
correct indentation from a given state.

</p>
<p>Our state only holds a single property, <code>inString</code>. This is needed
because strings may span multiple lines, and CodeMirror tokens can&#39;t,
so when finding a string that continues to the next line we have to
communicate the fact that we&#39;re still in a string to the next call to
<code>token</code>.

</p>
<p>The <code>token</code> function first handles the case where we are at the start
of a string (not currently in one, but right before a double quote
character). If so, it consumes the quote and sets the <code>inString</code> flag.

</p>
<p>Next, if we&#39;re in a string, we look for a closing quote on this line.
If one is found, we unset the <code>inString</code> flag. Then we return
<code>&quot;string&quot;</code> to indicate that the current token is a string.

</p>
<p>If we&#39;re not in a string, we just skip to either the next double quote
or the end of the line, and return <code>null</code>, to mark the token (the text
skipped over) as unstyled.

</p>
<h2>State management</h2>
<p>To be able to quickly and efficiently re-highlight a piece of text as
it is being edited, CodeMirror stores copies of state objects in its
<a href="codemirror-line-tree.html">representation</a> of the document. Whenever a line needs to be
rendered, it looks for a state object in the lines before it, going
backwards until it finds one or hits the start of the document (at
which point it can call <code>startState</code> to produce a state). If it has to
go too far back (current limit is 100 lines), it will, to save time,
simply take the line (within that limit) with the smallest
indentation, and assign a blank (starting) state to it.

</p>
<p>Once it has a state, it runs the tokenizer over the lines that were
skipped, feeding them that state object, which they will update. And
finally, it runs the tokenizer over the line itself, and uses its
output to assign CSS classes to the individual tokens.

</p>
<p>Apart from the process described above, which is synchronous because
it is needed to render a line (<em>right now</em>), there&#39;s another,
asynchronous (background) parsing process that ensures the
highlighting stays consistent. For example, a change at the start of a
document could open a comment block or string, which would cause the
whole document to be styled differently.

</p>
<p>The background parser uses <code>setTimeout</code> along with a check that bails
it out when it has been running for a given number milliseconds, to
act as a kind of background thread. It keeps a &#39;frontier&#39;, a point up
to which it knows the highlighting is consistent, which is adjusted
whenever the document is modified (or a new mode is chosen). As it
runs, parsing lines and assigning them a state, it adjusts this
frontier forwards.

</p>
<p>To preserve memory, the background parser doesn&#39;t go beyond the end
of the currently visible (scrolled into view) part of the document.
That means that, if you open a huge document and never scroll down, no
state is accumulated for the whole document. It also means that most
background parsing runs are short, since there&#39;ll be no more than a
few hundred lines between the part of the document that you&#39;re
currently editing and the bottom of the visible view port.

</p>
<h2>Power</h2>
<p>The string highlighting example above could have been (slightly) more
succinctly written with a regular expression state machine. In fact,
it&#39;s would probably be a good thing for CodeMirror to come with a
wrapper that adapts such a state machine to CodeMirror&#39;s <code>token</code>
function interface. I&#39;ve been waiting for a <a href="https://plus.google.com/106343137603240143566/posts/LG2aB5zZ3b8">common standard</a>
for such specifications to emerge, but not much progress seems to be
made there.

</p>
<p>Still, lots of syntaxes have features that are difficult, painful, or
even impossible to express in regular expressions. Take, for example,
recognizing the difference between regular expressions and division
operators in JavaScript code.

</p>
<p>And, even better, when the syntax highlighter is a real program that
runs over the code in a well-defined, complete way, you can do all
kinds of neat clever things with it. For example, the JavaScript mode
recognizes local variables, and colors them differently. The
<a href="http://codemirror.net/demo/complete.html">auto-completion</a> demo fetches this information from the mode
state and uses it to complete local variable names. The XML mode will
highlight mismatched tags for you.

</p>
<h2>Modularity</h2>
<p>Because modes are simply tokenizers, with a very straightforward
interface, they can be run in different contexts. One example is the
<a href="http://codemirror.net/demo/runmode.html"><code>runMode</code></a> add-on, which simply runs a tokenizer over a piece of
text and, through a callback, gives you back the tokens.

</p>
<p>In fact, the syntax highlighting on this blog is powered by CodeMirror
modes, driven by a browserless node.js version of <code>runMode</code>.

</p>
<p>Another useful consequence of modular modes is that they are easy to
<em>compose</em>. For example the <a href="http://codemirror.net/mode/htmlmixed/">mixed HTML mode</a> composes the
JavaScript, CSS, and XML modes (the latter has a configuration option
that makes it handle HTML). Internally, it initializes all three
modes, and when tokenizing, it multiplexes between them—feeding the
current input to the sub-mode that is active, and switching to a
different sub-mode when it encounters something that looks like a
<code>script</code> or <code>style</code> tag.

</p>
<p>In fact, there&#39;s a utility shim, the <a href="http://codemirror.net/doc/manual.html#util_multiplex">mode multiplexer</a>,
that makes it easy to combine modes in such a way, when they are
separated by fixed, context-independent strings.

</p>
<p>Another, similar shim, the <a href="http://codemirror.net/doc/manual.html#util_overlay">overlay mode</a>, combines modes in
a different way. It takes a base mode and an overlay mode, and runs
both over the whole document, combining their styling information in
the actual tokens it outputs. This can be used, for example, to
highlight specific characters (say, tabs) in the editor, by overlaying
a mode that simply finds such characters and assigns them a style.
Or you could write a spell-checking overlay, which looks up each word
it finds in a dictionary, and styles the ones it doesn&#39;t recognize.

</p>
<h2>Detailed context information</h2>
<p>Defining useful code-editor functionality often requires understanding
the the context at a given position. For example, when matching
brackets, you want to match brackets that fulfill the same role in the
document. A brace in a string or comment should not match a &#39;real&#39;
brace that actually delimits a block of code.

</p>
<p>For that, we simply take the token style of each brace we find as we
are looking for a match, and compare it to the style of the brace we
started from. Sometimes, it is useful to not only look at the token
style, but also the parser state. I mentioned the example of
auto-completing local variables earlier.

</p>
<p>One area where this is used pervasively is smart indentation. All
&#39;serious&#39; CodeMirror modes keep context information—such as which
blocks and parentheses are currently open—in their state objects. From
that information, an indentation can easily (and reliably) be derived.
Contrast the the terrifying regular expression hacks that some Emacs
modes use to guess indentation levels—which often still get it wrong.

</p>
<p>Another example is that, just last week, I was writing a system that
needed to display a list of arguments below the editor whenever the
user was typing an argument list for a known function. Figuring out
that the cursor is in an argument list, and at which argument it is,
would be a rather complex task, involving knowledge of brackets and
quotes, if I had to do it myself. But I could simply rig the mode,
which was already tracking contexts, to store that information in its
state, and get easy (and fast) access to it whenever the cursor was
placed in a new position.
</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>CodeMirror 2.34 and 3.0beta1 released</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/codemirror-2.34-and-3beta1.html"/>
      <id>http://marijnhaverbeke.nl/blog/codemirror-2.34-and-3beta1.html</id>
      <updated>2012-09-19T00:00:00+01:00</updated>
      <category term="codemirror"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>I&#39;ve just marked the current state of the master branch as version
2.34. The main changes are:

</p>
<ul>
<li>New mode: <a href="http://codemirror.net/mode/commonlisp/">Common Lisp</a></li>
<li>Fix right-click select-all on most browsers.</li>
<li>Change the way highlighting happens:<ul>
<li>Saves memory and CPU cycles.</li>
<li><code>compareStates</code> is no longer needed.</li>
<li><code>onHighlightComplete</code> no longer works.</li>
</ul>
</li>
<li>Integrate mode (Markdown, XQuery, CSS, sTex) tests in the central testsuite.</li>
<li>Add a <a href="http://codemirror.net/doc/manual.html#version"><code>CodeMirror.version</code></a> property.</li>
<li>More robust handling of nested modes in <a href="http://codemirror.net/demo/formatting.html">formatting</a> and <a href="http://codemirror.net/demo/closetag.html">closetag</a> plug-ins.</li>
<li>Un/redo now preserves <a href="http://codemirror.net/doc/manual.html#markText">marked text</a> and bookmarks.</li>
</ul>
<p>See <a href="https://github.com/marijnh/CodeMirror/compare/v2.33...v2.34">github</a> for a full list of patches. Get the zip file from
<a href="http://codemirror.net/codemirror-2.34.zip">the website</a>.

</p>
<p>2.34 will be the last &#39;full&#39; release on the 2.x branch. I will
continue to bring out bugfix releases on that branch for at least two
more months, but new work will, from now on, happen on version 3.

</p>
<p>The first beta version of CodeMirror 3 also came out today. The jump
to version 3 is mostly a result of some of the major work I did last
month, that the community <a href="http://pledgie.com/campaigns/17784">generously sponsored</a>. Some of
that work required incompatible API changes, and those changes landed
in version 3 rather than the 2.x branch. The current beta has no known
major problems (<a href="https://github.com/marijnh/CodeMirror/issues?milestone=2&amp;state=open">issue list for v3 milestone</a>), but contains a
lot of new code, and a serious overhaul of the old code, so I would
not recommend using it in production yet.

</p>
<p>I <em>would</em> be very thankful for any testing, of the editor in general
and especially of the new features. I&#39;ve written an
<a href="http://codemirror.net/3/doc/upgrade_v3.html">upgrade guide</a> that describes what changed, what&#39;s new, and
how to adjust your code to it.

</p>
<p>The zip file for version 3 is on <a href="http://codemirror.net/codemirror-3.0beta1.zip">the website</a>, and its
development takes place on the <a href="https://github.com/marijnh/CodeMirror/tree/v3">v3 branch</a> in the git repository.

</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>Faking an editable control in browser JavaScript</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/browser-input-reading.html"/>
      <id>http://marijnhaverbeke.nl/blog/browser-input-reading.html</id>
      <updated>2012-09-18T00:00:00+01:00</updated>
      <category term="javascript"/><category term="codemirror"/><category term="cm-internals"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>This is a post in the <a href="./#cm-internals"><em>cm-internals</em></a> series, describing the
internals of the <a href="http://codemirror.net/">CodeMirror</a> editor.

</p>
<p>The problem it tackles is this: you are writing a JavaScript control
that needs to act as a text input field—it must be focusable, support
copy and paste, receive typed input—but really isn&#39;t. I.e. you want to
draw it yourself, and have full control over its content.

</p>
<p>In this post, I won&#39;t talk about drawing a cursor, maintaining your
own selection, and similar. Those are also required to present a
convincing text input, of course. But they are relatively
straightforward to implement.

</p>
<h2>The hidden textarea</h2>
<p>The crux of my solution, the initial inspiration for which I got from
the <a href="http://ace.ajax.org">ACE</a> editor, revolves around a hidden <a href="https://developer.mozilla.org/en-US/docs/HTML/HTML_Elements/textarea">textarea</a> node.
This is the thing that the browser <em>believes</em> is focused when the
editor looks like it is focused. It&#39;ll behave like a regular focusable
object, you can assign a <code>tabindex</code> to it, and will receive <code>focus</code>
and <code>blur</code> events when it gains or loses focus, allowing us to update
the style of our editor (show/hide cursor, color/grey selection) to
reflect its focused state.

</p>
<p>This textarea must, obviously, not be visible. The suspension of
disbelief required for an editable control to feel real is
completely ruined when there&#39;s a textarea sitting next to it, with its
own blinking cursor.

</p>
<p>However, if you give the textarea <code>display: none</code> or <code>visibility:
hidden</code>, the browser decides that it is not really part of the
document and will refuse to focus it. CodeMirror gets around this by
wrapping the textarea (made small) in an <code>overflow: hidden; height: 0</code>
element (<code>div</code>). That makes it both invisible and focusable.

</p>
<p>(You&#39;ll also want an <code>outline: none</code> style, to prevent some browsers
from helpfully showing a glow around it when focused, which is for
some reason not clipped by the <code>overflow: hidden</code>.)

</p>
<p>An other unfortunate (or fortunate, depending on your perspective)
effect of a focused editing control is that the browser will scroll it
into view every time it notices activity in it. This means that, if
the hidden textarea simply sat at the top of the editor, and you had
that top scrolled out of view because you were editing something near
the bottom of the editor, your window would scroll up every time you
typed a character.

</p>
<p>CodeMirror absolutely positions the <code>div</code> element it uses to hide the
textarea, and moves it around to always line up with the cursor. That
way, it actually helps scroll the real cursor into view.

</p>
<h2>Maintaining selection</h2>
<p>When the user has selected some text, and performs a copy or cut
action, the correct text should be placed on the clipboard.

</p>
<p>This means that the selected text must be present in the textarea, and
selected. There are two approaches one can take here. The first, taken
by <a href="http://ace.ajax.org">ACE</a>, is to listen for <code>copy</code> and <code>cut</code> events (which are
fired <em>before</em> the actual copy or cut takes place), and only when such
an event is detected, insert the currently selected text into the
textarea and select it.

</p>
<p>CodeMirror&#39;s approach is less clever, but more robust. It simply
always places the currently selected text into the textarea
(selected). The downside is that setting and getting a textarea&#39;s
<code>value</code> property when it contains a lot of text is <strong>slow</strong>. If you
put a huge document into CodeMirror and press ctrl-A / cmd-A (select
all), there&#39;ll be a noticeable pause. (On some old browsers, depending
on the size of the document, it can actually look more like a browser
freeze than a noticeable pause.)

</p>
<p>The advantage of this approach is that it works on Opera, which
doesn&#39;t fire <code>copy</code> and <code>cut</code> events, and that, on Linux, on some
browsers, it&#39;ll play nice with the X Windows selection clipboard (i.e.
middle-mouse-button paste). CodeMirror takes some care to minimize the
amount of <code>textarea.value</code> traffic it produces, for example by not
updating the value during a selection drag, but only when the drag is
finished.

</p>
<p><em>Update</em>: It turned out to be easy to wire up CodeMirror to perform
the same trick as ACE—only putting in the whole selection when a cut
or copy happens—but only do it when the selection is actually big, and
we&#39;re on a browser that fires <code>copy</code> and <code>cut</code> events. For small
selections, the X Windows menu will still work, yet the pathological
case of select-all in a huge doc is only costly when the resulting
selection is copied.

</p>
<h2>Noticing input</h2>
<p>So the hidden textarea contains the current selection, and has its
content selected. That means that when the user types something, or
pastes text, the content of the textarea will be the inserted text
(overwriting the previous selection, if any), which can then be
inserted into the real document at the cursor position.

</p>
<p>But who will tell us when input happens? For a start, we can listen to
events like <code>keypress</code>, <code>paste</code>, <a href="https://developer.mozilla.org/en-US/docs/DOM/DOM_event_reference/input"><code>input</code></a>, and even mouse
events. Those&#39;ll tell us that something might be about to go down. So
we set a timeout, and check the content of the textarea a few
milliseconds later.

</p>
<p>But that isn&#39;t perfect. Opera doesn&#39;t fire <code>paste</code>—and when you paste
from the menu, there also aren&#39;t any mouse events being fired.
Furthermore, <a href="http://en.wikipedia.org/wiki/Input_method_editor">IME input</a>, on some browsers, can cause the content
of the textarea to be updated without any event being fired.

</p>
<p>So we must poll too. And polling could get expensive, if we do it a
lot and have to read the (potentially large) value of the textarea
every time. Fortunately, we are helped by the fact that if the
textarea has a big value (the selection), that value will be selected,
and entering input would overwrite it. Thus, if the textarea has a
selection (which is cheap to check), its value does not have to be
read. This makes polling cheap, and allows CodeMirror to poll
intensively when it is focused without eating up too many CPU cycles.
(It stops polling when unfocused.)

</p>
<h2>About IME</h2>
<p>I mentioned <a href="http://en.wikipedia.org/wiki/Input_method_editor">IME</a>, Input Method Editor. I am not an expert on it,
since I don&#39;t speak any language that requires it to be used. But, in
brief, it allows people who write in scripts that have too many
characters to fit on a keyboard to use sequences of key strokes to
create characters. It usually operates by showing the <em>current</em> result
of the composition in the editable control, and then <em>replacing</em> it
with the updated result as more keys are pressed.

</p>
<p>If CodeMirror were to clear the textarea every time it reads input,
that would throw off partially finished IME input. So what it does is,
when no selection exists, to leave the current input in the textarea,
and store its value somewhere. Then next time when it polls, it
compares the new value of the textarea to the previous value, discards
the common prefix string, and uses what remains of the new value as
the text to insert. If something also remains of the old value (after
discarding the common prefix), that means that part of the previous
value was <em>replaced</em> by new text, and the new input should replace
those old characters in the document.

</p>
<h2>Drag-and-drop</h2>
<p>Modern browsers provide a <a href="https://developer.mozilla.org/en-US/docs/DragDrop/Drag_and_Drop">weird but useful drag-and-drop API</a>.
It is easy for an editing control to hook into this to support
dropping text into the editor and dragging text out of this. There are
a few subtleties. Here is CodeMirror&#39;s <code>dragstart</code> handler:

</p>
<pre><code class="lang-javascript"><span class="cm-variable">on</span>(<span class="cm-variable">node</span>, <span class="cm-string">&quot;dragstart&quot;</span>, <span class="cm-keyword">function</span>(<span class="cm-def">e</span>) {
  <span class="cm-comment">// Set the dragged data to the currently selected text</span>
  <span class="cm-variable-2">e</span>.<span class="cm-property">dataTransfer</span>.<span class="cm-property">setData</span>(<span class="cm-string">&quot;Text&quot;</span>, <span class="cm-variable">editor</span>.<span class="cm-property">getSelection</span>());

  <span class="cm-comment">// Use dummy image instead of default browsers image.</span>
  <span class="cm-keyword">if</span> (<span class="cm-variable-2">e</span>.<span class="cm-property">dataTransfer</span>.<span class="cm-property">setDragImage</span>)
    <span class="cm-variable-2">e</span>.<span class="cm-property">dataTransfer</span>.<span class="cm-property">setDragImage</span>(<span class="cm-variable">document</span>.<span class="cm-property">createElement</span>(<span class="cm-string">'img'</span>), <span class="cm-number">0</span>, <span class="cm-number">0</span>);
}</code></pre>
<p>The <code>setDragImage</code> call, which in effect suppresses the default drag
image, is needed to prevent some browsers from showing the whole
editor being dragged around, because the outer element was set as
<code>draggable=true</code>.

</p>
<p>In CodeMirror&#39;s <code>mousedown</code> handler, I also <code>preventDefault()</code> clicks
that are not inside of the selection, so that dragging to create a
selection does not trigger text dragging. On Webkit, it is necessary,
in addition to that, to only set the <code>draggable</code> attribute to true
when handling a <code>mousedown</code> event that actually looks like a drag, and
setting it back to false afterwards.

</p>
<p>The <code>drop</code> event handler for an editor can do the <a href="http://www.html5rocks.com/en/tutorials/file/dndfiles/#toc-selecting-files-dnd">song and dance</a>
with a <code>FileReader</code> to also handle files being dropped into the
editor.

</p>
<h2>Context menu</h2>
<p>As the icing on the cake, an editing control should behave properly
when right-clicked. The context menu should contain working &#39;copy&#39;,
&#39;cut&#39;, and &#39;paste&#39; items.

</p>
<p>Unfortunately, there is no API for hooking into context menus. You can
capture the click and display your own menu, but that is very lame,
and, what&#39;s worse, you won&#39;t have access to the clipboard so you can&#39;t
even properly implement copy/paste functionality.

</p>
<p>As usual in browser land, there&#39;s a horrible kludge to be found to
make up for the lack of APIs. In this case, we can respond to a mouse
click or <code>contextmenu</code> event by briefly unhiding the textarea (giving
it a low opacity and no borders in order to not draw attention to it),
and placing it under the mouse cursor.

</p>
<p>Since the textarea already contains the current selection, and, if it
has a selection, its top left corner, which we place under the mouse
cursor, will be where that selection is located, the browser now
believes that we clicked on the textarea&#39;s selection, and will provide
the menu items we want. Even if the the node is hidden again after a
few milliseconds, the click will have been associated with it, and a
subsequent paste will still be applied to our textarea.

</p>
<p>One issue is that Firefox will fire the <code>contextmenu</code> event <em>after</em>
opening the contextmenu, at which point it is too late to trick it
into believing the textarea was clicked. So on that browser, we
trigger the kludge from the <code>mousedown</code> handler instead (given that
the right button was pressed).

</p>
<p>A fourth item from the context menu that we&#39;d like to support is
&#39;select all&#39;. To do this, we add a bogus space at the start of the
content, which is not selected, and then poll for a while to see
whether this space became selected. If it did (with the rest of the
content still intact), we select everything in the editor. If
something else changed about the textarea, or some amount of time went
by, we give up.

</p>
<h2>Detour</h2>
<p>For non-input keyboard events, such as cursor movement keys,
CodeMirror simply handles the raw event itself and performs the
appropriate operations on its internal selection representation.

</p>
<p>The initial CodeMirror version 2 used a different approach, which was
cute but in the end didn&#39;t work out. It put not only the selection,
but also a few lines around that into the textarea, and left local
cursor movement up to the browser. It would not just get input from
the textarea, but also selection information.

</p>
<p>This had the advantage of using the &#39;native&#39; key bindings of the
browser. It would work for custom key bindings, and outsource some of
the complexity of selection handling to the browser.

</p>
<p>It was abandoned because it required a <em>lot</em> of hacks to get working.
For example, you can&#39;t set the selection&#39;s anchor when setting a
selection on a textarea. The anchor is the side that does not move
when you press shift-left (or any other shift-motion). Browsers assume
it to always be the left side of the selection when the selection is
set through setting <code>selectionStart</code> and <code>selectionEnd</code>. To have the
selection behave properly when it was in fact inverted (the anchor was
the rightmost side) involved some painful and brittle kludges.

</p>
<p>Additionally, it seems that very few people actually reconfigure the
keyboard bindings in their browsers (browsers don&#39;t make it very easy
to do so), and, interestingly, people were more interested in
providing custom bindings for CodeMirror than in reconfiguring their
browsers.

</p>
<p>In the end, the extra complexity of handling our own keyboard events
turned out to be less than the complexity that came with the approach
outlined above. So CodeMirror moved to the model where the textarea
holds only the selection, and never has to deal with cursor-motion
key presses.
</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>JavaScript closure vs. object look-up performance</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/closure-vs-object-performance.html"/>
      <id>http://marijnhaverbeke.nl/blog/closure-vs-object-performance.html</id>
      <updated>2012-09-13T00:00:00+01:00</updated>
      <category term="javascript"/><category term="performance"/><category term="codemirror"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p><strong>Note:</strong> the question asked in this post, &quot;why aren&#39;t closures
super-fast?&quot;, was thorougly answered by Vyacheslav Egorov in
<a href="http://mrale.ph/blog/2012/09/23/grokking-v8-closures-for-fun.html">his followup</a>. Reading that is probably more informative than
reading the text below.

</p>
<p>I originally structured <a href="http://codemirror.net">CodeMirror</a> instances as one huge closure
that contained all the internal variables. The constructor would
create local variables for all internal state, and local functions for
everything that needed access to that state, and then return an object
that contained the API methods, which themselves also closed over all
those internals. Something like this:

</p>
<pre><code class="lang-javascript"><span class="cm-keyword">function</span> <span class="cm-variable">CodeMirror</span>(<span class="cm-def">args</span>) {
  <span class="cm-comment">// Internal state</span>
  <span class="cm-keyword">var</span> <span class="cm-def">doc</span> = <span class="cm-variable">something</span>, <span class="cm-def">selection</span> = <span class="cm-variable">somethingElse</span>;
  <span class="cm-comment">// Internal functions</span>
  <span class="cm-keyword">function</span> <span class="cm-def">modifyDoc</span>(<span class="cm-def">from</span>, <span class="cm-def">to</span>, <span class="cm-def">newText</span>) {
    <span class="cm-comment">/* directly access doc, selection, etc */</span>
  }
  <span class="cm-keyword">function</span> <span class="cm-def">drawDoc</span>() { <span class="cm-comment">/* ... */</span> }

  <span class="cm-keyword">return</span> {
    <span class="cm-property">getLine</span>: <span class="cm-keyword">function</span>(<span class="cm-def">n</span>) { <span class="cm-keyword">return</span> <span class="cm-variable">getLineFrom</span>(<span class="cm-variable-2">doc</span>, <span class="cm-variable-2">n</span>); },
    <span class="cm-property">refresh</span>: <span class="cm-variable-2">drawDoc</span>
    <span class="cm-comment">/* etc */</span>
  };
}</code></pre>
<p>I had several reasons for doing it like this. Firstly, it minifies
well—local variables are very easy and non-invasive to rename, so if
most of your fields and functions are regular variables rather than
object fields, simple minification works very well. There are tools
like Google&#39;s <a href="http://closure-compiler.appspot.com/home">Closure compiler</a> in &#39;advanced&#39; mode, which do try
to rename properties, but those are harder to use (they need to be
told which properties they may rename, and which are exported or come
from external component, such as <code>.style.display</code> on a DOM node).

</p>
<p>Secondly, it makes for uncluttered code—I can write <code>foo</code> instead of
<code>this.foo</code> or <code>this.view.doc.foo</code>. That really does make a big
difference in the overall succinctness of the code.

</p>
<p>Thirdly, and lastly, I <em>believed</em> that this would be faster. I
reasoned thusly: a lexical variable in a closure is in static,
known-at-compile-time place. The closure data is allocated as a
structure with a known layout, and the closing function will have a
pointer to that structure in a known place. Thus, a reference to a
closed-over variable involves:

</p>
<ul>
<li>Fetching a pointer from the current function</li>
<li>Fetching a field at a known offset from that pointer&#39;s destination</li>
</ul>
<p>That sounds like two, three instructions at most, plus maybe two more
to get at the current function&#39;s data. In case it&#39;s a nested closure,
where the current function closes over an environment that in turn
closed over the variable we&#39;re getting at, that&#39;d add another hop, but
still, nothing more than a simple following of pointers is involved.

</p>
<p>Compare that to accessing an object field. This has been the target of
much optimization work, since it used to be one of JavaScript&#39;s main
bottlenecks, but it still requires a baseline amount of work. Assuming
the JavaScript engine implements <a href="http://blog.cdleary.com/2010/09/picing-on-javascript-for-fun-and-profit/">polymorphic inline caching</a>, which
all relevant ones do at this point, you&#39;ll still have to:

</p>
<ul>
<li>Get the pointer to the cache from the instruction stream</li>
<li>Fetch the shape or hidden class from the object pointer</li>
<li>Fetch the cached shape from the cache</li>
<li>Compare the two and do a conditional jump</li>
<li>(Assuming a hit) get the field offset from the cache</li>
<li>Use this field to dereference the object pointer and get the property value</li>
</ul>
<p>In my mind, this might come close to the speed of accessing a
closed-over variable, but would definitely not surpass it.

</p>
<p><strong>However</strong>, benchmarks, both <a href="http://jsperf.com/access-object-properties-via-closure-vs-this/2">micro</a> and a more elaborate one
that I&#39;ll discuss in a moment, do show that on modern engines, object
access is in fact <em>faster</em> than closure access.

</p>
<p>I don&#39;t have an explanation for this. I&#39;d be happy if someone can
enlighten me on the subject. My current assumption is that the people
working on these engines were just so busy optimizing object access
and <a href="http://www.webkit.org/perf/sunspider/sunspider.html">Sunspider</a> performance that, unlike the compiler
implementers in most other functional-language communities, closures
just haven&#39;t been that well-optimized.

</p>
<p>I spent the past few days on an experiment. I rewrote CodeMirror&#39;s
core to use a set of objects rather than a single big closure for its
central state. I have a version that passes the test suite now
(though, since this change involved touching pretty much every single
one of the almost 2000 lines that lived in that monster closure,
there&#39;s probably some breakage that I haven&#39;t caught).

</p>
<p>The reasons for this mostly had to do with modularity and code
clarity. Closures are, in a way, too convenient. I can just define a
new variable to hold some state, access it from everywhere, and it&#39;ll
work. This is <em>good</em>, in most respects, when the system modelled by the
closure is small (to medium) in size. But CodeMirror had long ago
crossed the threshold where the proliferation of stateful local
variables became hard to see through. Grouping them into a set of
objects with well defined roles and lifetimes definitely made the data
model easier to understand and reason about. It also, by lifting all
internal functions out of the closure, forces me to specify the inputs
that the functions act on in their argument lists.

</p>
<p>The overhauled implementation did become noisier, obviously. Field
access had to be prefixed by object names all over the place, and it
is often necessary to create locals like <code>var doc = cm.view.doc;</code> to
prevent typing out the chain of property accesses twenty times in a
function.

</p>
<p>These are the file size numbers, in bytes, using <a href="https://github.com/mishoo/UglifyJS">UglifyJS</a> for
minification:

</p>
<pre><code>            Full   Minified  Min+gzip
Closure   150453      65381     22733
Objects   154752      74655     24448</code></pre>
<p>So the raw file became <strong>2.7%</strong> bigger, the minified file <strong>12.4%</strong>
(!), and the gzipped file <strong>7.0%</strong>. Zipping absorbs some of the extra
size of the minified version, because the repeated property names are
exactly the kind of thing that compression is supposed to handle well,
but there still remains a significant bloat of the file size.

</p>
<p>My conclusion: closures really do help with minification, but not to a
huge enough extent to justify sticking to it for the CodeMirror
project.

</p>
<p>Finally, performance. I only did some ad-hoc benchmarks on Chrome 21
and Firefox 15, comparing the old closure-based CodeMirror codebase to
the equivalent, object-using one. But those showed, on both browsers,
a consistent speedup in the <strong>2% to 3% range</strong>. Thus, my intuition
about closure access being fast was once again debunked.
</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>CodeMirror's document representation</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/codemirror-line-tree.html"/>
      <id>http://marijnhaverbeke.nl/blog/codemirror-line-tree.html</id>
      <updated>2012-09-10T00:00:00+01:00</updated>
      <category term="javascript"/><category term="codemirror"/><category term="cm-internals"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>This post is part of an ongoing series of articles that aim to
document the internals of the <a href="http://codemirror.net">CodeMirror</a> code editor. I will use
the <a href="./#cm-internals"><em>cm-internals</em></a> tag to distinguish these posts—if you intend to
hack on CodeMirror, it might be worthwhile to see what else is there.

</p>
<h2>The problem</h2>
<p>The initial implementation of CodeMirror 2 represented the document as
a flat array of line objects. This worked quite well—splicing arrays
will require the part of the array after the splice to be moved, but
this is basically just a simple <code>memmove</code> of a bunch of pointers, so
it is cheap even for huge documents.

</p>
<p>However, in version 2.17 (November 2011), I added support for line
wrapping and code folding. Once lines start taking up a non-constant
amount of vertical space, looking up a line by vertical position
(which is needed when someone clicks the document, and to determine
the visible part of the document during scrolling) can only be done
with a linear scan through the whole array, summing up line heights as
you go. One of the design goals of CodeMirror is to make editing
responsive even in huge document. So this is not an acceptable
solution.

</p>
<h2>Considerations</h2>
<p>Operations that an effective document representation must be supported
are looking up lines by line number, looking up lines by vertical
position (for example, when figuring out where in a document a mouse
click happened, or which lines are visible given a vertical scroll
position), the reverse of those two operations (going to a line number
or vertical offset given a line object). Furthermore, inserting and
deleting lines, as well as updating the height of a line, should be
cheap operations.

</p>
<p>Anyone with a single computer science course under their belt will
recognize this as a problem that calls for some sort of tree
representation.

</p>
<p>A regular binary tree would work. But the kind of update operations
that we should be worried about are big ones—pasting a huge chunk of
text, or selecting a few thousand lines and and then pressing delete.
All balanced binary trees that I&#39;m familiar with define only
single-element insertion and deletion operations, which would have to
be repeated a huge amount of times in the case of such mass updates.

</p>
<p>We&#39;d also prefer to keep tree depth to a minimum, because we&#39;ll be
traversing this tree to find a line node or to update a line&#39;s parent
nodes a <em>lot</em>—conversion between line numbers and line objects are
rampant, because both describe essential properties of a line. (The
number can not be stored in the line object, because that would
require every single line object to be updated whenever someone
presses enter near the top of the document.)

</p>
<h2>Representation</h2>
<p>The new representation is based on a <a href="http://en.wikipedia.org/wiki/B-Tree">B-tree</a>. These have the
wide branching factor (and thus shallow depth) that we need, and lend
themselves very well to bulk updates (more on that later).

</p>
<p>The leaves of the tree contain arrays of line objects, with a fixed
minimum and maximum size, and the non-leaf nodes simply hold arrays of
child nodes. Each node stores both the amount of lines that live
inside of them and the vertical space taken up by these lines. This
allows the tree to be indexed both by line number and by vertical
position, and all access has logarithmic complexity in relation to the
document size.

</p>
<p>Because both of these index keys (line number and vertical position)
increase monotonically, a single tree can be indexed by both of them.
This is great, it gives us the height index almost &#39;for free&#39;, with no
additional data structure and only a very small amount of extra logic
(maintaining the heights on updates).

</p>
<p>Below is an illustration of what a tree might look like. This is a
document of 50 lines, where the root node contains two children—one is
branching chunk containing a number of leaf chunks, and the other is
itself a leaf chunk. The first leaf has been written out, it contains
seven lines, of which two are folded (taking up no height), and one is
wrapped (taking up more height than a regular, unwrapped line).

</p>
<pre><code>root (the document) (size: 50, height: 470)
 ├─ chunk1 (size: 35, height: 300)
 │  ├─ leaf1 (size: 7, height: 70)
 │  │  ├─ line1 (height: 10)
 │  │  ├─ line2 (height: 10)
 │  │  ├─ line3 (wrapped, height: 30)
 │  │  ├─ line4 (height: 10)
 │  │  ├─ line5 (folded, height: 0)
 │  │  ├─ line6 (folded, height: 0)
 │  │  └─ line7 (height: 10)
 │  ├─ leaf2 (size: 10, height: 110) 
 │  │  └─ ...
 │  └─ ...
 └─ leaf3 (size: 15, height: 170)
    └─ ...</code></pre>
<p>The size of the root node indicates the amount of lines that the
document contains (and its height indicates the height of the whole
document).

</p>
<p>If we wanted to find line 12, we&#39;d descend the root node, looking at
its child chunk. The first child has size 35, so that&#39;s the one that
contains line 12. Inside of this chunk, the first child is only of
size 7, so we skip that, keeping in mind that we&#39;ve seen seven lines,
and the offset that remains is 12-7=5. The second chunk has size 10,
which is more than 5, so we look inside that chunk. It is a leaf
chunk, which means that its content is flat, and we can simply grab
the line number five from inside of it.

</p>
<p>For an interactive visualization of this tree, see
<a href="http://codemirror.net/3/demo/btree.html">this demo on the CodeMirror website</a>.

</p>
<h2>Updates</h2>
<p>The interface for deleting and inserting line objects in a tree is
defined in terms of ranges of lines, rather than individual lines. To
insert a range of size N at position P, we walk down the tree to find
the leaf that contains position P. We then insert the whole range into
the leaf. If this makes the leaf too big (there&#39;s a fixed maximum size
defined for leaves), one or more new leaves will be split off from it,
and inserted into its parent. If this, subsequently, makes the parent
(non-leaf) chunk too big, that one is also split, and so on. If the
root node needs to be split, a new root is created to hold the
resulting chunks.

</p>
<p>The beauty of B-trees is that this simple and cheap algorithm
automatically balances the tree—when a branch grows, instead of
growing downwards, its surplus population percolates upwards, towards
the root, and causes the tree to grow from the root when it needs to.
This is a not a perfectly optimal balance, as in some other kinds of
trees, but it is definitely good enough for an editor implementation.

</p>
<p>To delete a range of lines, the deletion simply recursively enters the
branches that contains parts of the deleted range, and, in the leaf
chunks, remove the relevant lines (updating size and height in the
process). When a chunk becomes empty, it is simply removed completely,
and when a branch chunk&#39;s size drops below a certain threshold, it is
replaced by a flat leaf chunk. Again, this doesn&#39;t result in a perfect
balance, but is wonderfully simply. In fact it doesn&#39;t even completely
protect against pathological cases—there are editing patterns that can
result in a seriously unbalanced tree. But those, since the
unbalancing happens during deletion, can still only be as deep as the
original tree (created by insertion, which has better balancing
characteristics) was, and thus can&#39;t reach dangerous depths.

</p>
<h2>Intensive linking</h2>
<p>All line objects and tree nodes (except the root) have parent pointers
to the node above them. This allows for very fast height updating—when
a line changes, find the height delta, and simply walk its parent
pointers adding this delta to their height—and finding the line
numbers of a given line object.

</p>
<p>Maintaining these links, and breaking them when lines are dropped from
the document, is somewhat awkward, but having such logic in place
turned out to be useful for other purposes as well. It allows
CodeMirror to fire an event when a line is dropped from the document,
gives an easy way to check whether a line is still <em>live</em> (it is when
it has a parent pointer), and makes it more immediately obvious when a
data structure is not being maintained consistently (the code will
quickly try to follow a null pointer).
</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>Heckle, or how I shall try to blog again</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/heckle.html"/>
      <id>http://marijnhaverbeke.nl/blog/heckle.html</id>
      <updated>2012-09-06T00:00:00+01:00</updated>
      <category term="javascript"/><category term="templating"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>Last week, the need for a platform to publish <a href="cursor-in-bidi-text.html">my bi-directional text
story</a> on forced me to think about blogging software once more.

</p>
<p>I had heard that all the cool kids are now using <a href="https://github.com/mojombo/jekyll">Jekyll</a> on
their <a href="https://github.com/">Github</a> pages to publish their blogs. I am not keen on
depending on Github for yet another aspect of my online life, but the
idea of generating a static site from a git repository does sound
appealing.

</p>
<p>Setting up a simple site with Jekyll was a breeze. It really is a
well-designed approach. But I also immediately ran into its
limitations. Something as simple as sorting my list of tags by the
amount of posts they contain was... apparently not possible without
monkey-patching some classes from a plug-in.

</p>
<p>Now I have all the respect in the world for the Ruby community and
their anarchist approach to modularity, but such shenigans just don&#39;t
fit my own sense of aesthetic. On the other hand, templating languages
like Liquid, which Jekyll uses, are not nearly anarchist enough for my
taste—they strictly forbid any kind of interesting logic to be placed
in the template. I&#39;m sure this is a good thing in some projects with
some teams. But having to add code in another, largely unrelated
place, just to be able to sort a stupid list in a certain way is <em>not</em>
helping.

</p>
<p>It turned out that, because of Jekyll&#39;s brilliant simplicity, cloning
it was easier than figuring out how to monkey-patch it.

</p>
<p>Several hours, and two hundred lines of code later, I present to you:
<a href="https://github.com/marijnh/heckle"><strong>Heckle</strong></a>, a <a href="http://nodejs.org">node.js</a>-based Jekyll clone.

</p>
<p>It obviously doesn&#39;t have all the features of Jekyll—only the core
things that I needed to generate this site. It converts <a href="http://daringfireball.net/projects/markdown/">Markdown</a>
files with a <a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter">YAML front matter</a> to HTML using templates from the
<code>_layouts</code> and <code>_includes</code> directories. It finds posts in the <code>_posts</code>
directory and understands what tags mean. And it copies all other
files in the working directory over to <code>_site</code>, where the output ends
up, and which you can then point your web server at.

</p>
<p>For templates, Heckle uses a modified version of <a href="http://marijnhaverbeke.nl/mold">Mold</a>, which
was designed for unrestrainedly mixing JavaScript logic into
templates. It was originally designed for client-side instantiation,
and I had to fix some limitations that made it work poorly with
node.js. Those&#39;ll probably soon be integrated in the main repository.

</p>
<p>The sources for my new blog are on <a href="https://github.com/marijnh/blog/">Github</a>. I imported some old
posts to make it look less empty. With luck, I&#39;ll actually form a
blogging habit this time around.

</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>Cursor motion &amp; bi-directional text</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/cursor-in-bidi-text.html"/>
      <id>http://marijnhaverbeke.nl/blog/cursor-in-bidi-text.html</id>
      <updated>2012-09-05T00:00:00+01:00</updated>
      <category term="javascript"/><category term="codemirror"/><category term="unicode"/><category term="cm-internals"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p><em>&quot;Unicode is hard&quot;</em> is a commonplace among developers. And I guess it
is hard. Witness the amount of systems that get things like string en-
and decoding wrong. And that is the easy part—the real fun starts when
you need to actually display those strings.

</p>
<p>Fortunately, toolkits and libraries are able to hide the horrors of
combining characters, directionality, and word breaking most of the
time. Today, most software has moved beyond the ASCII-only worldview,
and makes at least an effort to handle these things properly. You
throw strings at it, it displays them correctly for you.

</p>
<p>But there are situations where that <em>doesn&#39;t</em> suffice. <a href="http://codemirror.net">CodeMirror</a> is
a code editor implemented in JavaScript. It relies on the browser to
display its content, and modern browsers are very good at displaying
text. But it also displays a cursor, and controls its movement. To do
that, it needs to be aware of some non-trivial properties of Unicode
text.

</p>
<p>In this article, I&#39;ll outline the solutions I came up with. I was able
to find very little useful material on the subject online. It should
be noted that I am in no way an expert in this field, and that I had
to take a number of shortcuts to prevent the size and complexity of my
editor library—which, as a JavaScript program, is downloaded by every
user—within bounds. I am also not an Arabic or Hebrew speaker, and as
such have very little experience with bi-directional editing
interfaces. Remarks and corrections are very welcome.

</p>
<h2>The problem</h2>
<p>Originally, CodeMirror assumed that each character in a line
represented a glyph, and that these glyphs were shown left-to-right.
This means that when, for example, the right arrow was pressed, the
editor could simply move its cursor position one character towards the
end of the string, and all was well.

</p>
<p>But some Semitic scripts, notably Arabic and Hebrew, do not start
writing on the left of the medium, but rather write right-to-left. Now
if we had to deal only with lines that were entirely right-to-left (or
left-to-right), that would be relatively easy—just move the cursor
towards the <em>start</em> of the line when the right arrow is pressed, since
a lower index represents a more rightward position in the visual
representation of the line.

</p>
<p>Unfortunately, things are not that easy. Firstly, there is nothing
preventing people from mixing right-to-left and left-to-right scripts
in a single line. Secondly, a group of digits (&quot;Arabic numerals&quot;—the
ones we use in the West), when occurring in a piece of Arabic text,
are to be rendered left-to-right, within their right-to-left context.

</p>
<p>Let us look at an example. Assume that upper-case characters are
Latin, and lower-case ones Arabic. If a string looks like this
(logical order):

</p>
<pre><code>A B C a b c 1 2 3 d e D E  (logical)</code></pre>
<p>It is rendered like this (visual order):

</p>
<pre><code>A B C e d 1 2 3 c b a D E  (visual)</code></pre>
<p>The Arabic range (<code>a</code> to <code>d</code>) is flipped, and <em>within</em> that, the
number (<code>123</code>) is flipped once more.

</p>
<h2>Bidi algorithm</h2>
<p>Deriving a visual order from a string isn&#39;t magic—there&#39;s a
<a href="http://www.unicode.org/reports/tr9/">well-formalized algorithm</a> for this published by the Unicode
Consortium. It, in brief, proceeds by categorizing the characters in
the string into categories like &quot;Left-to-Right&quot;, &quot;Right-to-Left
Arabic&quot;, &quot;Whitespace&quot;, and a number of other ones. It then performs a
bunch of operations that reduce one category to another based on its
context, for example reducing the category of &quot;Non-spacing marks&quot; to
that of the character before it. Finally, when only a few categories
remain, it builds up a visual order by &#39;flipping&#39; sequences of
characters with a right-to-left category, and within those, flipping
sequences of digits back again.

</p>
<p>I won&#39;t go any deeper into this algorithm. It is well
<a href="http://www.unicode.org/reports/tr9/">documented</a>. It in fact also declares a mechanism for inserting
RTL and LTR marks, which explicitly control the direction of the text.
CodeMirror&#39;s <a href="https://github.com/marijnh/CodeMirror/blob/67365d2646551a0dcf9a18e2d1998686907233cd/lib/codemirror.js#L3447">implementation</a> does not currently implement
this part of the algorithm.

</p>
<h2>Quantum cursors</h2>
<p>The fact that bi-directional text has &#39;jumps&#39; in it—positions where
visually adjacent characters are not actually adjacent in the logical
representation—has some interesting ramifications for editable text.

</p>
<p>(Note that, though I am going to describe a behavior as if it were
normative, this is just what most non-Windows software seems to be
doing, and in fact there are other ways to handle bi-directional
editing.)

</p>
<p>When the cursor is at such a jump, for example at position 3 in the
example string, as illustrated below, it defies some of the
assumptions that underlie classical, single-direction cursor
interfaces.

</p>
<pre><code> A B C a b c D E  (logical)
0 1 2 3 4 5 6 7 8</code></pre>
<p>(The numbers are the indices into the string that are used to
represent cursor positions.)

</p>
<p>When you type a <code>D</code> (Latin letter) at position 3, all is well—a letter
is inserted to the left of the cursor, and the cursor moves to the
right to end up after the new letter. Same if you press backspace
there—the <code>C</code> is simply deleted and the cursor ends up after the <code>B</code>.

</p>
<p><em>But</em>, if you insert a character from a right-to-left script, say an
<code>x</code> (which you should read as being an Arabic, right-to-left
character), you end up with the string <code>ABCxabcDE</code>, and the <code>x</code> will
appear, in the visual order <code>ABCcbaxDE</code>, quite some distance from the
cursor. Similarly, when you press delete, you&#39;ll delete the <code>a</code> rather
than the <code>c</code> which is visually to the right of the cursor.

</p>
<p>What Chrome does in such a situation, and what I&#39;ve followed in
CodeMirror, is to show a secondary cursor at the other end of the
jump. So, visually, you&#39;d see this, with the asterisks indicating the
primary cursor and the plus sign the secondary one.

</p>
<pre><code>A B C c b a D E  (visual)
     *     +</code></pre>
<p>Now, at least you&#39;ll get a visual hint that something is not normal,
and have a quick way to see where <em>else</em> your editing actions might
take effect.

</p>
<h2>Cursor motion</h2>
<p>We will assume what we want the arrows on the cursor motion keys to
match the direction that the cursor actually moves when you press them
(this is not standard on Windows, where many programs move the cursor
&#39;logically&#39; when you press arrow-left and arrow-right, causing it to
move in the opposite direction from the arrow when in right-to-left
text).

</p>
<p>To do this consistently, we define an ordering of (primary) cursor
positions. This ordering must have two properties: it must correspond
to the visual order of the line—i.e. a position more to the right in
this order is more to the right on the screen, and it must include
every possible cursor position in the string—it would be bad if there
were positions that you can&#39;t reach with the cursor keys. In regular
left-to-right text, this ordering is trivial. In a three-character
string, it would be <code>0123</code> (where <code>0</code> is before the first character,
and <code>3</code> is after the last). In a fully right-to-left string, it is
simply the inverse of that, <code>3210</code>. The fun starts with bi-directional
strings.

</p>
<p>The cursor-position-order does not follow trivially from the character
display order, because it talks about positions <em>between</em> characters.
This includes assigning an ordering to jump positions. More
concretely, here&#39;s an example. First, it shows the logical string,
with its possible cursor positions labelled, and then below it, it
shows the corresponding visual order and a possible ordering of
character positions (the numbers refer to string offsets, their
position reflects their ordering):

</p>
<pre><code> A B C a b c D E  (logical)
0 1 2 3 4 5 6 7 8
 A B C c b a D E  (visual)
0 1 2 3 5 4 6 7 8</code></pre>
<p>This&#39;d mean that when you are at position <code>3</code>, pressing the right
arrow takes you to position <code>5</code>, and pressing it again takes you to
<code>4</code>.

</p>
<p>This ordering is mostly uncontroversial, except for the positions of
<code>3</code> and <code>6</code>—we could also have flipped them, so that the user would
already be taken to position <code>6</code> (the leftmost end of the
right-to-left section) after pressing right from position <code>2</code>.

</p>
<p>Whether either of these orders satisfies the &#39;corresponds to the
visual order&#39; restriction depends on how we draw the primary cursor.
At position <code>6</code>, we could emphasize that it sits at the rightmost end
of the <code>abc</code> right-to-left section, and draw it to the left to the <code>c</code>,
or we could emphasize that it sits right before the <code>DE</code> left-to-right
section, and draw it to the left of the <code>D</code>.

</p>
<p>Both work, but I&#39;ve found that the least confusing behavior occurs
when biasing cursor positions towards the <em>dominant</em> direction of the
line (which CodeMirror defines to be the direction of the start of the
line, but you could also base it on the percentage of characters that
is right-to-left). So that means that in a line that starts with
left-to-right text, when the cursor is on a jump point, the primary
cursor is drawn relative to the character at the left-to-right side of
the jump, and the secondary one relative to the right-to-left side.

</p>
<p>Thus, in this schema, we&#39;d reflect this bias by using the order shown
above, rather than the one where <code>3</code> and <code>6</code> are swapped (which would
amount to biasing towards the right-to-left text, which is not the
dominant direction of this line).

</p>
<h2>Data structure and algorithms</h2>
<p>Depending on what you are doing, a display order can be represented in
various ways. For cursor placement, drawing of the selection, and
cursor motion, I found it most practical to use a format that lists
the individual single-direction sections of text, from left to right
in display order, and for each section tells me its direction, its
start point, and its end point (in logical order offsets).

</p>
<p>For cursor drawing, this allows us to find the section that the cursor
is inside of, in which case it is simply drawn between the characters
that are adjacent to it, or the two sections that it sits between. In
that second case, we place the primary cursor relative the section
whose direction corresponds to our dominant direction, and the
secondary cursor relative to the other.

</p>
<p>Selection drawing has to handle selections that look visually
discontinuous because of jumps. For example if, in the example string
that mixes numbers and right-to-left text, you select from position
<code>1</code> (between <code>A</code> and <code>B</code>) to position <code>8</code> (between <code>2</code> and <code>3</code>), the
selection marker should cover the part shown by asterisks:

</p>
<pre><code>A B C a b c 1 2 3 d e D E  (logical)
  *************
A B C e d 1 2 3 c b a D E  (visual)
  ***     ***   *****</code></pre>
<p>Drawing this is easily done by iterating over the sections that make
up the line, and checking for each whether it overlaps the selection.
If so, draw the part of the selection that falls inside the section by
using coordinates relative to the section.

</p>
<p>Finally, cursor movement, done in steps of one, starts by, just like
cursor drawing, finding the section that the start position sits in or
between. If it sits between sections, the section with the dominant
direction is chosen as current section.

</p>
<p>We then move one character in the intended direction. If we are in a
right-to-left section, this is the inverse of the specified direction
(i.e. left, which is normally <code>-1</code>, towards zero, becomes <code>1</code>, towards
the end of the string).

</p>
<p>If this motion takes us <em>out of</em> our current section, where &#39;out of&#39;
is defined as beyond the section&#39;s edge for sections of the dominant
direction, and onto the section&#39;s edge for non-dominant sections, we
need to skip to the next section (in the visual order), entering that
one on the correct side (i.e. the visual right side when moving left,
left side when moving right, where the offset corresponding to that
side depends on the section&#39;s own direction). If the new section is
non-dominant, we skip its edge, since that offset belonged to the
origin section.

</p>
<p>The above step may have to be performed multiple times, to allow
moving through single-character non-dominant sections. It stops when
we find a position that is actually inside the section that we are
currently looking at.

</p>
<h2>The bad apple</h2>
<p>So far, that&#39;s all more or less coherent. Unfortunately, there&#39;s a
problem. Let us try to assign an ordering to a string that starts
left-to-right and ends right-to-left:

</p>
<pre><code> A B C x y z  (logical)
0 1 2 3 4 5 6
 A B C z y x  (visual)
0 1 2 3 5 4 ?</code></pre>
<p>Because the second (<code>zyx</code>) section isn&#39;t dominant, the positions on
its boundaries aren&#39;t biased towards it. Thus, cursor position <code>3</code>
should obviously be placed after <code>C</code> in the visual order. That leaves
only <code>6</code>, the one offset not assigned to any other position, for the
position at the end, marked with a question mark. But there is very
little sense in placing it there—at least, the algorithms described
above don&#39;t automatically do it.

</p>
<p>As a kludge, I made the algorithm that produces the sections, whenever
the last section&#39;s direction doesn&#39;t agree with the first section,
insert an empty, zero-length section with the dominant direction at
the end. This, being dominant, will, be associated with the position
at the end of the string, and cause the ordering and cursor drawing to
work out as hoped.

</p>
<h2>Combining characters</h2>
<p>Another feature that was needed to make working with Hebrew text
bearable is recognizing of combining characters.

</p>
<p>If I write &#39;é&#39;, your browser will probably display that as an E with
an acute (forward) accent, even though the source for this page
actually contains two characters, first an &#39;e&#39; and then Unicode point
769 (COMBINING_ACUTE_ACCENT). Such characters are rarely used in
Latin languages, because Unicode point 233
(LATIN_SMALL_LETTER_E_WITH_ACUTE) fills the same role just fine
in a single character. But in Hebrew (as well as several other
languages), the combinations are so numerous that assigning a code
point to every one isn&#39;t practical, and thus people actually <em>use</em>
such combining characters.

</p>
<p>When editing text with such combining characters, since only a single
glyph is displayed for a series of one non-combining and N combining
characters, the cursor will appear to stay in the same place when
inside this series. This is very annoying, and it seems preferable to
simply skip over the whole section in a single jump.

</p>
<p>In Unicode terminology, the code points that are combining/continuing
characters are recognized by the <code>Grapheme_Extend</code> derived core
property, as listed in <a href="http://www.unicode.org/Public/UNIDATA/DerivedCoreProperties.txt">this file</a>. The amount of ranges listed
there is huge, so, as a crummy trade-of between correctness and code
size, I only took the ranges of a number of scripts (Latin, Hebrew,
Arabic) and made those into a big regular expression that the editor
can use to recognize continuing characters, leaving out a whole range
of other languages.

</p>
<p>(Of course, The Right Thing would have been for browsers to expose a
JavaScript API for getting Unicode character properties, since they
internally have this information anyway—they need it to properly
display text. I expect it&#39;ll probably be another five to ten years
before such an API is considered important enough to standardize.
Unicode adoption is a slow process.)

</p>
<p>Having this regular expression, I simply make sure that cursor
movement by keyboard or mouse always puts the cursor on the boundary
of a visual glyph, never before a combining character.

</p>
<h2>Cursor motion versus deletion</h2>
<p>While the arrow keys have a visual arrow on them suggesting a certain
direction, backspace and delete imply the deleting of characters
respectively before and after the cursor, where before and after are
interpreted relative to the direction of the text. So in
right-left-text, backspace will delete the character to the <em>right</em> of
the cursor.

</p>
<p>This means that determining the range to delete in response to these
characters is done by looking at <em>logical</em> rather than <em>visual</em>
positions. I also chose not to take combining characters into account
when handling these, so that pressing backspace after &#39;é&#39; (E +
combining accent) will leave you with just &#39;e&#39;—i.e. you delete
characters, not glyphs.

</p>
<h2>Closing</h2>
<p>As mentioned, being only a simple Dutch speaker exposed mostly to
Western languages, I expect to be missing half of the subtleties of
bi-directional editing. I will update this post with correction as
they come in.

</p>
<p>Regardless of that, I hope this write-up turns out to be useful to
somebody. Figuring all this out without much guidance was a major time
sink. I&#39;d be glad to save someone else the bother.
</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>A Gentle Introduction to Machine Fundamentals</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/turtle/"/>
      <id>http://marijnhaverbeke.nl/turtle/</id>
      <updated>2011-01-18T00:00:00+01:00</updated>
      
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>Read this post at <a href="http://marijnhaverbeke.nl/turtle/">http://marijnhaverbeke.nl/turtle/</a>.</p>
      ]]></content>
    </entry>
  
    
    <entry>
      <title>Announcing: CL-TK</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/cl-tk.html"/>
      <id>http://marijnhaverbeke.nl/blog/cl-tk.html</id>
      <updated>2009-03-16T00:00:00+01:00</updated>
      <category term="common lisp"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>I&#39;ve just put my Common Lisp Tcl/Tk bindings online. They differ from
the existing <a href="http://www.peter-herth.de/ltk/">LTK</a> library in that they...

</p>
<ul>
<li><p>Support for both FFI bindings and talking to a <code>wish</code> shell.</p>
</li>
<li><p>Have hardly any &#39;wrapper&#39; functionality — you&#39;re directly
driving a Tcl interpreter from Lisp.</p>
</li>
</ul>
<p>They&#39;ve only been used in one medium-sized project so far, but they
are so simple that I&#39;m rather confident they work as intended.

</p>
<p>Project page at <a href="http://marijn.haverbeke.nl/cl-tk/"><a href="http://marijn.haverbeke.nl/cl-tk/">http://marijn.haverbeke.nl/cl-tk/</a></a>.

</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>Parse-js library released</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/parse-js.html"/>
      <id>http://marijnhaverbeke.nl/blog/parse-js.html</id>
      <updated>2008-12-29T00:00:00+01:00</updated>
      <category term="javascript"/><category term="common lisp"/><category term="parsing"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>I&#39;ve released the JavaScript parser (in Common Lisp) that I had
sitting around as a proper package. It&#39;s small, fast, and complete,
but not terribly well-documented. Get it from the <a href="http://marijn.haverbeke.nl/parse-js/">project page</a>.

</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>Postmodern 1.13 released</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/postmodern-1.13.html"/>
      <id>http://marijnhaverbeke.nl/blog/postmodern-1.13.html</id>
      <updated>2008-08-28T00:00:00+01:00</updated>
      <category term="common lisp"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>There were a handful of small fixes still sitting around, as well as
the deftable addition. It has been four months since 1.12, so: 1.13!
Champagne all around.

</p>
<p><a href="http://common-lisp.net/project/postmodern/postmodern-1.13.tgz">Download</a>.

</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>Announcing: ST-JSON</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/st-json.html"/>
      <id>http://marijnhaverbeke.nl/blog/st-json.html</id>
      <updated>2008-08-08T00:00:00+01:00</updated>
      <category term="common lisp"/><category term="json"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>After dragging my JSON implementation through various projects, and
having several incompatible versions exist at the same time, I got
permission to open-source it from the <a href="http://streamtech.nl">company</a> that originally
paid me to write it, so it has a home now: <a href="http://marijn.haverbeke.nl/st-json">ST-JSON</a>.

</p>
<p>There already exists a comparable library called <a href="http://common-lisp.net/project/cl-json/">CL-JSON</a>. I
originally wrote a new one because the way CL-JSON uses <code>nil</code> to
encode all of boolean false, the empty list, and the empty object was
causing headaches, and later I added some other extensions.

</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>HTTP Caching</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/http-caching.html"/>
      <id>http://marijnhaverbeke.nl/blog/http-caching.html</id>
      <updated>2008-07-30T00:00:00+01:00</updated>
      <category term="http"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>Webreference.com just published my <a href="http://www.webreference.com/internet/http/">piece about HTTP caching</a>.
Unfortunately, their editor introduced a bunch of ugly sentences (see
the first one) and mistakes (this seems to be a major part of editors&#39;
job descriptions). The general idea should still be discernable.

</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>Interning symbols</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/interning.html"/>
      <id>http://marijnhaverbeke.nl/blog/interning.html</id>
      <updated>2008-07-19T00:00:00+01:00</updated>
      <category term="common lisp"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>Mike Ajemian wrote <a href="http://blackgrit.blogspot.com/2008/07/interning-function-name-in-defmacro.html">something</a> about dynamically interning
symbols using the <code>~:@</code> format construct to upcase parts of the
symbol&#39;s name. This works fine on standard CLs, but if you want to
write something that also works with Allegro&#39;s &#39;modern&#39; mode (where
symbols are case-sensitive), you don&#39;t want to upcase the symbol. What
you do there is use the reader against itself — <code>(format nil &quot;~a-~a&quot; :insert name-symbol)</code>,
the <code>symbol-name</code> of <code>:insert</code> will be whatever
the reader made of it, and thus you&#39;ll get a symbol that follows the
same conventions as the surrounding system.

</p>
<p>(You also don&#39;t want to use uppercase strings in your package
definitions — I&#39;m looking at you <code>split-sequence</code> — use <code>#:symbol</code>
syntax if you don&#39;t want to waste memory on pointless keyword
symbols.)

</p>
<p>In a similar vein, sometimes you&#39;ll want to create throwaway symbols
with a certain name at run-time. (For example, <a href="http://common-lisp.net/project/postmodern/s-sql.html">S-SQL</a> requires
symbols for stuff like database index names, which you might want to
generate.) <code>intern</code> leaks memory in this case, since anything interned
stays around until it is uninterned. <code>gensym</code> tends to add junk to the
symbol&#39;s name. Some messing around with apropos (more languages need
an apropos feature) led me to the predictably named
<a href="http://www.lisp.org/HyperSpec/Body/fun_make-symbol.html"><code>make-symbol</code></a>, which, like <code>#:</code> syntax, creates an
uninterned symbol with a specific name.

</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>Why monads have not taken the Common Lisp world by storm</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/common-lisp-monads.html"/>
      <id>http://marijnhaverbeke.nl/blog/common-lisp-monads.html</id>
      <updated>2008-07-11T00:00:00+01:00</updated>
      <category term="common lisp"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>Today I was trying write a parser for a reasonably complicated
language. Since I do not tend to learn from other people&#39;s work or
even from my own past mistakes, and tend to greatly underestimate
the complexity of tasks (or overestimate my own skills) this went
something like this:

</p>
<ul>
<li>Try to quickly write the whole thing as a single recursive
descent parser. Note the exploding amount of ugliness. Give
up.</li>
<li>Separate out the tokenizer (novel idea, huh?) to keep parser
complexity down. Parser is still a mess. Ugh!</li>
<li>Play around with some CL parser frameworks. This helps a
bit, but none of the systems I tried produce errors with enough
information.</li>
<li>Remember the breeze it was to write a parser with the
Haskell Parsec library. Mess around with monads for a while,
learn a few things, but not how to write elegant parsers in
Common Lisp.</li>
</ul>
<p>So, as it stands, I have wasted a few hours, and am still
without an acceptable parser. But I <strong>do</strong> have a
subject for an article, which is at least something.

</p>
<p>You are bound to have heard of monads. They are the wonderful
abstraction that allows Haskell to be a pure functional language
without being completely unusable. They have also successfully
been applied to do some other things (things not directly related
to the challenges of purity) in nicer or more general ways
— continuation-passing, exception handling, list
comprehension, and of course, parsing.

</p>
<p>Given how wonderful monads are, why aren&#39;t other language
suffering from major monad envy? I have seen a few modest efforts
to apply them in Python, Ruby, F#, and C#, and I&#39;m sure there are
things happening that I&#39;m not aware of, but nothing world-shaking,
it seems. One reason is of course that monads are horribly
confusing, and their use is not immediately obvious. The fact that
closures, for example, are only now becoming mainstream suggests
that awesome features whose use is not immediately obvious are
slow to be adapted. But another reason seems to be that
Haskell-style mean lean monad use only really works in languages
that:

</p>
<ol>
<li>Support ML-style function-fu (trivial currying, single
namespace).</li>
<li>Have type classes.</li>
<li>Allow polymorphism on return types.</li>
</ol>
<p>I&#39;ll go into these in a moment. But the point is that in the
set of languages that I am familiar with, there&#39;s only one that
satisfies these conditions... Haskell.

</p>
<p>So what would monads look like in CL. Well, if we want to
define polymorphic monadic operations, bind should probably be a
generic function. I&#39;ll use Haskell&#39;s operators for the names:


</p>
<pre><code class="lang-commonlisp"><span class="cm-bracket">(</span><span class="cm-variable">defgeneric</span> <span class="cm-variable">>>=</span> <span class="cm-bracket">(</span><span class="cm-variable">m</span> <span class="cm-variable">f</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
<span class="cm-bracket">(</span><span class="cm-variable">defgeneric</span> <span class="cm-variable">>></span> <span class="cm-bracket">(</span><span class="cm-variable">m1</span> <span class="cm-variable">m2</span><span class="cm-bracket">)</span>
  <span class="cm-bracket">(</span><span class="cm-keyword">:method</span> <span class="cm-bracket">(</span><span class="cm-variable">m1</span> <span class="cm-variable">m2</span><span class="cm-bracket">)</span>
    <span class="cm-bracket">(</span><span class="cm-variable">>>=</span> <span class="cm-variable">m1</span> <span class="cm-bracket">(</span><span class="cm-variable">lambda</span> <span class="cm-bracket">(</span><span class="cm-variable">x</span><span class="cm-bracket">)</span> <span class="cm-bracket">(</span><span class="cm-variable">declare</span> <span class="cm-bracket">(</span><span class="cm-variable">ignore</span> <span class="cm-variable">x</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span> <span class="cm-variable">m2</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span></code></pre>
<p>Awesome! But what about return? I merrily started typing
<code>(defgeneric mreturn (val))</code>... oh hold on. There&#39;s
nothing to dispatch on: In Haskell, the kind of return we need is
determined by the type deduction system — use
<code>return</code> where an IO monad is expected, and you get the
IO return, etc. In CL, this does not work. (Though several ugly
workarounds come to mind.) Oh well, I&#39;ll just give the different
returns different names. Anyway, here&#39;s a neat implementation of
Haskell&#39;s <code>do</code>:

</p>
<pre><code class="lang-commonlisp"><span class="cm-bracket">(</span><span class="cm-variable">defmacro</span> <span class="cm-variable">seq</span> <span class="cm-bracket">(</span><span class="cm-variable-2">&amp;rest</span> <span class="cm-variable">ops</span><span class="cm-bracket">)</span>
  <span class="cm-bracket">(</span><span class="cm-variable">labels</span> <span class="cm-bracket">(</span><span class="cm-bracket">(</span><span class="cm-variable">transform</span> <span class="cm-bracket">(</span><span class="cm-variable">ops</span><span class="cm-bracket">)</span>
             <span class="cm-bracket">(</span><span class="cm-variable">cond</span> <span class="cm-bracket">(</span><span class="cm-bracket">(</span><span class="cm-variable">and</span> <span class="cm-bracket">(</span><span class="cm-variable">consp</span> <span class="cm-bracket">(</span><span class="cm-variable">car</span> <span class="cm-variable">ops</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span> <span class="cm-bracket">(</span><span class="cm-variable">eq</span> <span class="cm-bracket">(</span><span class="cm-variable">caar</span> <span class="cm-variable">ops</span><span class="cm-bracket">)</span> '<span class="cm-variable">&lt;-</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
                    `<span class="cm-bracket">(</span><span class="cm-variable">>>=</span> ,<span class="cm-bracket">(</span><span class="cm-variable">caddar</span> <span class="cm-variable">ops</span><span class="cm-bracket">)</span> <span class="cm-bracket">(</span><span class="cm-variable">lambda</span> <span class="cm-bracket">(</span>,<span class="cm-bracket">(</span><span class="cm-variable">cadar</span> <span class="cm-variable">ops</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
                                          ,<span class="cm-bracket">(</span><span class="cm-variable">transform</span> <span class="cm-bracket">(</span><span class="cm-variable">cdr</span> <span class="cm-variable">ops</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
                   <span class="cm-bracket">(</span><span class="cm-bracket">(</span><span class="cm-variable">null</span> <span class="cm-variable">ops</span><span class="cm-bracket">)</span> <span class="cm-bracket">(</span><span class="cm-variable">error</span> <span class="cm-string">&quot;Empty seq.&quot;</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
                   <span class="cm-bracket">(</span><span class="cm-bracket">(</span><span class="cm-variable">null</span> <span class="cm-bracket">(</span><span class="cm-variable">cdr</span> <span class="cm-variable">ops</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span> <span class="cm-bracket">(</span><span class="cm-variable">car</span> <span class="cm-variable">ops</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
                   <span class="cm-bracket">(</span><span class="cm-atom">t</span> `<span class="cm-bracket">(</span><span class="cm-variable">>></span> ,<span class="cm-bracket">(</span><span class="cm-variable">car</span> <span class="cm-variable">ops</span><span class="cm-bracket">)</span> ,<span class="cm-bracket">(</span><span class="cm-variable">transform</span> <span class="cm-bracket">(</span><span class="cm-variable">cdr</span> <span class="cm-variable">ops</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
    <span class="cm-bracket">(</span><span class="cm-variable">transform</span> <span class="cm-variable">ops</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>

<span class="cm-bracket">(</span><span class="cm-variable">macroexpand-1</span> '<span class="cm-bracket">(</span><span class="cm-variable">seq</span> <span class="cm-bracket">(</span><span class="cm-variable">&lt;-</span> <span class="cm-variable">x</span> <span class="cm-variable">monadic-read</span><span class="cm-bracket">)</span>
                 <span class="cm-bracket">(</span><span class="cm-variable">monadic-write</span> <span class="cm-string">&quot;You said: &quot;</span><span class="cm-bracket">)</span>
                 <span class="cm-bracket">(</span><span class="cm-variable">monadic-write</span> <span class="cm-variable">x</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>

<span class="cm-comment">;; => (>>= monadic-read (lambda (x)</span>
<span class="cm-comment">;;                        (>> (monadic-write &quot;You said: &quot;)</span>
<span class="cm-comment">;;                            (monadic-write x))))</span></code></pre>
<p>This restored my enthousiasm a little — I could emulate
<code>do</code>-notation, and it wasn&#39;t even complicated!

</p>
<p>An easy, rather trivial example would be the maybe monad, which
skips further computation as soon as any computation returns
<code>nil</code>:

</p>
<pre><code class="lang-commonlisp"><span class="cm-bracket">(</span><span class="cm-variable">defstruct</span> <span class="cm-variable">maybe</span> <span class="cm-variable">val</span><span class="cm-bracket">)</span>
<span class="cm-bracket">(</span><span class="cm-variable">defun</span> <span class="cm-variable">maybe</span> <span class="cm-bracket">(</span><span class="cm-variable">val</span><span class="cm-bracket">)</span>
  <span class="cm-bracket">(</span><span class="cm-variable">make-maybe</span> <span class="cm-keyword">:val</span> <span class="cm-variable">val</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
<span class="cm-bracket">(</span><span class="cm-variable">defmethod</span> <span class="cm-variable">>>=</span> <span class="cm-bracket">(</span><span class="cm-bracket">(</span><span class="cm-variable">m</span> <span class="cm-variable">maybe</span><span class="cm-bracket">)</span> <span class="cm-variable">f</span><span class="cm-bracket">)</span>
  <span class="cm-bracket">(</span><span class="cm-variable">if</span> <span class="cm-bracket">(</span><span class="cm-variable">maybe-val</span> <span class="cm-variable">m</span><span class="cm-bracket">)</span>
      <span class="cm-bracket">(</span><span class="cm-variable">funcall</span> <span class="cm-variable">f</span> <span class="cm-bracket">(</span><span class="cm-variable">maybe-val</span> <span class="cm-variable">m</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
      <span class="cm-variable">m</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
<span class="cm-bracket">(</span><span class="cm-variable">defun</span> <span class="cm-variable">liftmaybe</span> <span class="cm-bracket">(</span><span class="cm-variable">f</span><span class="cm-bracket">)</span>
  <span class="cm-bracket">(</span><span class="cm-variable">lambda</span> <span class="cm-bracket">(</span><span class="cm-variable">m</span><span class="cm-bracket">)</span> <span class="cm-bracket">(</span><span class="cm-variable">maybe</span> <span class="cm-bracket">(</span><span class="cm-variable">funcall</span> <span class="cm-variable">f</span> <span class="cm-variable">m</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>

<span class="cm-comment">;; Parse a string as a number, divide it cleanly by 10, and add 1 to</span>
<span class="cm-comment">;; the resulting number. Return nil if any of this fails.</span>
<span class="cm-bracket">(</span><span class="cm-variable">defun</span> <span class="cm-variable">string/10+1</span> <span class="cm-bracket">(</span><span class="cm-variable">str</span><span class="cm-bracket">)</span>
  <span class="cm-bracket">(</span><span class="cm-variable">maybe-val</span>
   <span class="cm-bracket">(</span><span class="cm-variable">seq</span> <span class="cm-bracket">(</span><span class="cm-variable">&lt;-</span> <span class="cm-variable">num</span> <span class="cm-bracket">(</span><span class="cm-variable">maybe</span> <span class="cm-bracket">(</span><span class="cm-variable">parse-integer</span> <span class="cm-variable">str</span> <span class="cm-keyword">:junk-allowed</span> <span class="cm-atom">t</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
    <span class="cm-bracket">(</span><span class="cm-variable">&lt;-</span> <span class="cm-variable">tenth</span> <span class="cm-bracket">(</span><span class="cm-variable">multiple-value-bind</span> <span class="cm-bracket">(</span><span class="cm-variable">quot</span> <span class="cm-variable">rem</span><span class="cm-bracket">)</span> <span class="cm-bracket">(</span><span class="cm-variable">floor</span> <span class="cm-variable">num</span> <span class="cm-number">10</span><span class="cm-bracket">)</span>
                <span class="cm-bracket">(</span><span class="cm-variable">maybe</span> <span class="cm-bracket">(</span><span class="cm-variable">and</span> <span class="cm-bracket">(</span><span class="cm-variable">zerop</span> <span class="cm-variable">rem</span><span class="cm-bracket">)</span> <span class="cm-variable">quot</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
    <span class="cm-bracket">(</span><span class="cm-variable">funcall</span> <span class="cm-bracket">(</span><span class="cm-variable">liftmaybe</span> '<span class="cm-number">1</span><span class="cm-variable">+</span><span class="cm-bracket">)</span> <span class="cm-variable">tenth</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span></code></pre>
<p>That&#39;s a little too blatantly useless to be interesting though.
But note how ugly CL&#39;s multiple namespaces make
<code>liftmaybe</code> and its uses.

</p>
<p>A more interesting (though, in the presence of mutability and
special variables, also rather pointless) example is the state
monad. This one passes around a state value &#39;in the background&#39;.
State monad values respresent computations from a state to a
(state, value) pair. This one used to confuse me hugely because I
though a state monad value contained a state. It does
<em>not</em>. I wrap these functions in a struct to be able to
dispatch the bind function on them.

</p>
<pre><code class="lang-commonlisp"><span class="cm-bracket">(</span><span class="cm-variable">defstruct</span> <span class="cm-variable">state-m</span> <span class="cm-variable">compute</span><span class="cm-bracket">)</span>
<span class="cm-bracket">(</span><span class="cm-variable">defun</span> <span class="cm-variable">state-m</span> <span class="cm-bracket">(</span><span class="cm-variable">compute</span><span class="cm-bracket">)</span>
  <span class="cm-bracket">(</span><span class="cm-variable">make-state-m</span> <span class="cm-keyword">:compute</span> <span class="cm-variable">compute</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>

<span class="cm-bracket">(</span><span class="cm-variable">defun</span> <span class="cm-variable">run-state</span> <span class="cm-bracket">(</span><span class="cm-variable">state</span> <span class="cm-variable">state-m</span><span class="cm-bracket">)</span>
  <span class="cm-bracket">(</span><span class="cm-variable">funcall</span> <span class="cm-bracket">(</span><span class="cm-variable">state-m-compute</span> <span class="cm-variable">state-m</span><span class="cm-bracket">)</span> <span class="cm-variable">state</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
<span class="cm-bracket">(</span><span class="cm-variable">defun</span> <span class="cm-variable">return-state</span> <span class="cm-bracket">(</span><span class="cm-variable">val</span><span class="cm-bracket">)</span>
  <span class="cm-bracket">(</span><span class="cm-variable">state-m</span> <span class="cm-bracket">(</span><span class="cm-variable">lambda</span> <span class="cm-bracket">(</span><span class="cm-variable">state</span><span class="cm-bracket">)</span> <span class="cm-bracket">(</span><span class="cm-variable">values</span> <span class="cm-variable">state</span> <span class="cm-variable">val</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>

<span class="cm-bracket">(</span><span class="cm-variable">defmethod</span> <span class="cm-variable">>>=</span> <span class="cm-bracket">(</span><span class="cm-bracket">(</span><span class="cm-variable">a</span> <span class="cm-variable">state-m</span><span class="cm-bracket">)</span> <span class="cm-variable">f</span><span class="cm-bracket">)</span>
  <span class="cm-bracket">(</span><span class="cm-variable">state-m</span> <span class="cm-bracket">(</span><span class="cm-variable">lambda</span> <span class="cm-bracket">(</span><span class="cm-variable">state</span><span class="cm-bracket">)</span>
     <span class="cm-bracket">(</span><span class="cm-variable">multiple-value-bind</span> <span class="cm-bracket">(</span><span class="cm-variable">state2</span> <span class="cm-variable">val</span><span class="cm-bracket">)</span> <span class="cm-bracket">(</span><span class="cm-variable">funcall</span> <span class="cm-bracket">(</span><span class="cm-variable">state-m-compute</span> <span class="cm-variable">a</span><span class="cm-bracket">)</span> <span class="cm-variable">state</span><span class="cm-bracket">)</span>
       <span class="cm-bracket">(</span><span class="cm-variable">funcall</span> <span class="cm-bracket">(</span><span class="cm-variable">state-m-compute</span> <span class="cm-bracket">(</span><span class="cm-variable">funcall</span> <span class="cm-variable">f</span> <span class="cm-variable">val</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span> <span class="cm-variable">state2</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>

<span class="cm-bracket">(</span><span class="cm-variable">defparameter</span> <span class="cm-variable">get-state</span>
  <span class="cm-bracket">(</span><span class="cm-variable">state-m</span> <span class="cm-bracket">(</span><span class="cm-variable">lambda</span> <span class="cm-bracket">(</span><span class="cm-variable">state</span><span class="cm-bracket">)</span> <span class="cm-bracket">(</span><span class="cm-variable">values</span> <span class="cm-variable">state</span> <span class="cm-variable">state</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
<span class="cm-bracket">(</span><span class="cm-variable">defun</span> <span class="cm-variable">set-state</span> <span class="cm-bracket">(</span><span class="cm-variable">state</span><span class="cm-bracket">)</span>
  <span class="cm-bracket">(</span><span class="cm-variable">state-m</span> <span class="cm-bracket">(</span><span class="cm-variable">lambda</span> <span class="cm-bracket">(</span><span class="cm-variable">old-state</span><span class="cm-bracket">)</span> <span class="cm-bracket">(</span><span class="cm-variable">declare</span> <span class="cm-bracket">(</span><span class="cm-variable">ignore</span> <span class="cm-variable">old-state</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span> <span class="cm-bracket">(</span><span class="cm-variable">values</span> <span class="cm-variable">state</span> <span class="cm-atom">nil</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span></code></pre>
<p>These, then, can be used to implement a function that maps over
a tree and counts the elements at the same time:

</p>
<pre><code class="lang-commonlisp"><span class="cm-bracket">(</span><span class="cm-variable">defun</span> <span class="cm-variable">map-count</span> <span class="cm-bracket">(</span><span class="cm-variable">tree</span> <span class="cm-variable">f</span><span class="cm-bracket">)</span>
  <span class="cm-bracket">(</span><span class="cm-variable">labels</span> <span class="cm-bracket">(</span><span class="cm-bracket">(</span><span class="cm-variable">iter</span> <span class="cm-bracket">(</span><span class="cm-variable">val</span><span class="cm-bracket">)</span>
         <span class="cm-bracket">(</span><span class="cm-variable">cond</span> <span class="cm-bracket">(</span><span class="cm-bracket">(</span><span class="cm-variable">consp</span> <span class="cm-variable">val</span><span class="cm-bracket">)</span>
                <span class="cm-bracket">(</span><span class="cm-variable">seq</span> <span class="cm-bracket">(</span><span class="cm-variable">&lt;-</span> <span class="cm-variable">car</span> <span class="cm-bracket">(</span><span class="cm-variable">iter</span> <span class="cm-bracket">(</span><span class="cm-variable">car</span> <span class="cm-variable">val</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
                     <span class="cm-bracket">(</span><span class="cm-variable">&lt;-</span> <span class="cm-variable">cdr</span> <span class="cm-bracket">(</span><span class="cm-variable">iter</span> <span class="cm-bracket">(</span><span class="cm-variable">cdr</span> <span class="cm-variable">val</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
                     <span class="cm-bracket">(</span><span class="cm-variable">return-state</span> <span class="cm-bracket">(</span><span class="cm-variable">cons</span> <span class="cm-variable">car</span> <span class="cm-variable">cdr</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
               <span class="cm-bracket">(</span><span class="cm-bracket">(</span><span class="cm-variable">null</span> <span class="cm-variable">val</span><span class="cm-bracket">)</span>
                <span class="cm-bracket">(</span><span class="cm-variable">return-state</span> <span class="cm-atom">nil</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
               <span class="cm-bracket">(</span><span class="cm-atom">t</span>
                <span class="cm-bracket">(</span><span class="cm-variable">seq</span> <span class="cm-bracket">(</span><span class="cm-variable">&lt;-</span> <span class="cm-variable">count</span> <span class="cm-variable">get-state</span><span class="cm-bracket">)</span>
                     <span class="cm-bracket">(</span><span class="cm-variable">set-state</span> <span class="cm-bracket">(</span><span class="cm-number">1</span><span class="cm-variable">+</span> <span class="cm-variable">count</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
                     <span class="cm-bracket">(</span><span class="cm-variable">return-state</span> <span class="cm-bracket">(</span><span class="cm-variable">funcall</span> <span class="cm-variable">f</span> <span class="cm-variable">val</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
<span class="cm-bracket">(</span><span class="cm-variable">run-state</span> <span class="cm-number">0</span> <span class="cm-bracket">(</span><span class="cm-variable">iter</span> <span class="cm-variable">tree</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>

<span class="cm-bracket">(</span><span class="cm-variable">map-count</span> '<span class="cm-bracket">(</span><span class="cm-number">1</span> <span class="cm-number">2</span> <span class="cm-bracket">(</span><span class="cm-number">4</span> <span class="cm-number">5</span> <span class="cm-bracket">(</span><span class="cm-number">6</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span> <span class="cm-bracket">(</span><span class="cm-bracket">(</span><span class="cm-number">87</span> <span class="cm-number">9</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span> <span class="cm-bracket">(</span><span class="cm-variable">lambda</span> <span class="cm-bracket">(</span><span class="cm-variable">n</span><span class="cm-bracket">)</span> <span class="cm-bracket">(</span><span class="cm-variable">+</span> <span class="cm-variable">n</span> <span class="cm-number">4</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
<span class="cm-comment">;; => 7</span>
<span class="cm-comment">;;    (5 6 (8 9 (10)) ((91 13)))</span>
<span class="cm-comment">;; Woo-hoo!</span></code></pre>
<p>Which does roughly the equivalent of...

</p>
<pre><code class="lang-commonlisp"><span class="cm-bracket">(</span><span class="cm-variable">defun</span> <span class="cm-variable">map-count-2</span> <span class="cm-bracket">(</span><span class="cm-variable">tree</span> <span class="cm-variable">f</span><span class="cm-bracket">)</span>
  <span class="cm-bracket">(</span><span class="cm-variable">let</span> <span class="cm-bracket">(</span><span class="cm-bracket">(</span><span class="cm-variable">count</span> <span class="cm-number">0</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
    <span class="cm-bracket">(</span><span class="cm-variable">labels</span> <span class="cm-bracket">(</span><span class="cm-bracket">(</span><span class="cm-variable">iter</span> <span class="cm-bracket">(</span><span class="cm-variable">val</span><span class="cm-bracket">)</span>
               <span class="cm-bracket">(</span><span class="cm-variable">if</span> <span class="cm-bracket">(</span><span class="cm-variable">consp</span> <span class="cm-variable">val</span><span class="cm-bracket">)</span>
                   <span class="cm-bracket">(</span><span class="cm-variable">mapcar</span> #'<span class="cm-variable">iter</span> <span class="cm-variable">val</span><span class="cm-bracket">)</span>
                   <span class="cm-bracket">(</span><span class="cm-variable">progn</span> <span class="cm-bracket">(</span><span class="cm-variable">incf</span> <span class="cm-variable">count</span><span class="cm-bracket">)</span>
                          <span class="cm-bracket">(</span><span class="cm-variable">funcall</span> <span class="cm-variable">f</span> <span class="cm-variable">val</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
      <span class="cm-bracket">(</span><span class="cm-variable">values</span> <span class="cm-bracket">(</span><span class="cm-variable">iter</span> <span class="cm-variable">tree</span><span class="cm-bracket">)</span> <span class="cm-variable">count</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span></code></pre>
<p>It appears that in the presence of mutable state, a lot of the
advantages of monads become moot. Furthermore, in the presence of
Common Lisp&#39;s syntax and semantics, they tend to become rather
cumbersome and ugly. I suspect this last point could be largely
overcome by some more clever macros and conventions — maybe
I&#39;m thinking too much in Haskell terms. But my insight into monads
is not really deep enough to be able to think in other terms, so
I&#39;ll leave that as an exercise to the reader.

</p>
<p>I still need to write that parser. I guess I&#39;ll embrace the
Lisp way and try to simulate the convenience of monadic parsing
with a big tangle of macros and special variables.
</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>Presenting: The Mold client-side web-templating system</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/mold.html"/>
      <id>http://marijnhaverbeke.nl/blog/mold.html</id>
      <updated>2008-07-10T00:00:00+01:00</updated>
      <category term="javascript"/><category term="templating"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>After messing around with a few different client-side templating
libraries, all of which seemed to be either unmaintained, too
overbearing (forcing you to work inside their &#39;framework&#39;), or just
plain wrongheaded, I went ahead and implemented a new one. Mold aims
to be a simple, general, convenient system for compiling and
instantiating HTML templates. See the <a href="http://marijn.haverbeke.nl/mold/">project page</a> for
examples, documentation and downloads.

</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>Idle cores to the left of me, race conditions to the right</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/blog/pcall.html"/>
      <id>http://marijnhaverbeke.nl/blog/pcall.html</id>
      <updated>2008-06-16T00:00:00+01:00</updated>
      <category term="common lisp"/><category term="concurrency"/><category term="performance"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>I think that, over the past year, I&#39;ve read some thirty
articles that start with the solemn or anxious announcement that
the future of programming will be multicore, and that one way or
another, we will have to get used to it. I&#39;ll try not to write
another one of those. In fact, it appears that multicore
processors are also pretty good single-core processors, and most
applications are, for the foreseeable future, comfortably
single-threaded. And in a lot of cases, they should be. So is
there any pressing reason to take notice of this new-fangled
hardware?

</p>
<blockquote>
<p>[I]t looks more or less like the hardware designers
have run out of ideas, and that they’re trying to pass the blame
for the future demise of Moore’s Law to the software writers by
giving us machines that work faster only on a few key
benchmarks!

</p>
</blockquote>
<p>That is from none less than Donald Knuth, in a <a href="http://www.informit.com/articles/article.aspx?p=1193856">recent
interview</a>. Nonetheless, I have (belatedly, I&#39;ll admit) started
to get excited about incorporating the kind of &#39;multi-threading
for the sake of multi-threading&#39; that multiple cores encourage
into my programs. Why? This might not be a very convincing reason
for the serious, result-oriented programmer, but parallel
programming, it turns out, is very amusing. Sure, there are
dead-lock death-traps, race-conditions, and a general dangerous
sense of non-determinism. But there is a logic to all of it, and a
working parallel program can be a thing of beauty. That kind of
beauty, and the complexity that tends to go with it, is what got
me into this business in the first place. (It wasn&#39;t my love for
hunching over keyboards or a deep dislike of sunlight, in any
case.)

</p>
<p>This infatuation started — predictably enough —
with Erlang. Erlang is kind of hip, makes you think about
concurrency in a whole new way, and is entirely dissatisfactory as
a programming language. I won&#39;t go too deeply into that last
point, since taking cheap shots at other people&#39;s work tends to
hurt one&#39;s credibility, but the un-polished and limited feel of
the language offended my delicate linguistic sensibilities, and
prevented me from investing too deeply into it, with the result
that I am still (also somewhat grudgingly, perhaps) doing most of
my work in Common Lisp.

</p>
<p>Common Lisp has no integrated, light-weight, multicore-friendly
threads. In fact, in only recently started having widespread
support for OS-level threads at all. This support comes,
invariably, in the form of shared memory, locks, and semaphores
<a href="http://common-lisp.net/project/bordeaux-threads">bordeaux-threads</a>
provides a pleasant portable wrapper). While these allow just
about any kind of concurrent program to be written, they are
fairly tedious and error-prone to work with. <a href="http://common-lisp.net/project/cl-muproc">CL-MUPROC</a>
builds a message-passing system on top of them, which allows a
more pleasant programming style. Every CL-MUPROC process is an OS
thread though, so you won&#39;t want to create thousands of them.

</p>
<p>Another approach for getting away from mutexes, one that has
been generating a lot of noise recently, is software transactional
memory. If that doesn&#39;t mean anything to you, I&#39;d recommend
watching this <a href="http://blip.tv/file/317758/">video</a> of
Simon Peyton Jones explaining the idea. I was surprised to find
that there apparently exists a <a href="http://common-lisp.net/project/cl-stm">CL-STM</a> (aren&#39;t we
CLers creative when it comes to naming projects). Seems to have
been inactive since early 2007, and as I understand it, STM is
rather hard to get right, so I&#39;m not sure I&#39;d risk building
something serious on this... but it <em>appears</em> to work. The
<a href="http://clojure.sourceforge.net">Clojure</a> people seem
to be making good use of STM in any case.

</p>
<p>On a related note, <a href="http://www.sbcl.org">SBCL</a>
exports a symbol <code>sb-ext:compare-and-swap</code>, which can
be used to do small-scale transactional tricks, and is often an
order of magnitude faster than the equivalent locking solution.
Here is a very simple concurrency-safe stack. The macro is a
convenient wrapper that helps use <code>compare-and-swap</code> in
a &#39;transactional&#39; way.

</p>
<pre><code class="lang-commonlisp"><span class="cm-bracket">(</span><span class="cm-variable">defmacro</span> <span class="cm-variable">concurrent-update</span> <span class="cm-bracket">(</span><span class="cm-variable">place</span> <span class="cm-variable">var</span> <span class="cm-variable-2">&amp;body</span> <span class="cm-variable">body</span><span class="cm-bracket">)</span>
  `<span class="cm-bracket">(</span><span class="cm-variable">flet</span> <span class="cm-bracket">(</span><span class="cm-bracket">(</span><span class="cm-variable">action</span> <span class="cm-bracket">(</span>,<span class="cm-variable">var</span><span class="cm-bracket">)</span> ,@<span class="cm-variable">body</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
 <span class="cm-bracket">(</span><span class="cm-variable">let</span> <span class="cm-bracket">(</span><span class="cm-bracket">(</span><span class="cm-variable">prev</span> ,<span class="cm-variable">place</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
   <span class="cm-bracket">(</span><span class="cm-variable">loop</span> <span class="cm-keyword">:until</span> <span class="cm-bracket">(</span><span class="cm-variable">eq</span> <span class="cm-bracket">(</span><span class="cm-variable">sb-ext:compare-and-swap</span> ,<span class="cm-variable">place</span> <span class="cm-variable">prev</span> <span class="cm-bracket">(</span><span class="cm-variable">action</span> <span class="cm-variable">prev</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span> <span class="cm-variable">prev</span><span class="cm-bracket">)</span>
         <span class="cm-keyword">:do</span> <span class="cm-bracket">(</span><span class="cm-variable">setf</span> <span class="cm-variable">prev</span> ,<span class="cm-variable">place</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
   <span class="cm-variable">prev</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>

<span class="cm-bracket">(</span><span class="cm-variable">defun</span> <span class="cm-variable">make-cstack</span> <span class="cm-bracket">(</span><span class="cm-variable-2">&amp;rest</span> <span class="cm-variable">elements</span><span class="cm-bracket">)</span>
  <span class="cm-bracket">(</span><span class="cm-variable">cons</span> <span class="cm-keyword">:stack</span> <span class="cm-variable">elements</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
<span class="cm-bracket">(</span><span class="cm-variable">defun</span> <span class="cm-variable">push-cstack</span> <span class="cm-bracket">(</span><span class="cm-variable">element</span> <span class="cm-variable">stack</span><span class="cm-bracket">)</span>
  <span class="cm-bracket">(</span><span class="cm-variable">concurrent-update</span> <span class="cm-bracket">(</span><span class="cm-variable">cdr</span> <span class="cm-variable">stack</span><span class="cm-bracket">)</span> <span class="cm-variable">elts</span>
    <span class="cm-bracket">(</span><span class="cm-variable">cons</span> <span class="cm-variable">element</span> <span class="cm-variable">elts</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
  <span class="cm-bracket">(</span><span class="cm-variable">values</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
<span class="cm-bracket">(</span><span class="cm-variable">defun</span> <span class="cm-variable">pop-cstack</span> <span class="cm-bracket">(</span><span class="cm-variable">stack</span><span class="cm-bracket">)</span>
  <span class="cm-bracket">(</span><span class="cm-variable">car</span> <span class="cm-bracket">(</span><span class="cm-variable">concurrent-update</span> <span class="cm-bracket">(</span><span class="cm-variable">cdr</span> <span class="cm-variable">stack</span><span class="cm-bracket">)</span> <span class="cm-variable">elts</span>
         <span class="cm-bracket">(</span><span class="cm-variable">cdr</span> <span class="cm-variable">elts</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span></code></pre>
<p>Stacks are represented as cons cells, since
<code>compare-and-swap</code> can only be used on a limited set of
&#39;places&#39; (cars, cdrs, svrefs, symbol-values), and not on things
like instance or struct slots. Writing a queue is only slightly
more complicated. Making popping threads block when there are no
elements available, on the other hand, is decidedly tricky. (I
think I have a working implementation... it is much faster than
the locking variant, but it is so complicated that I&#39;m not
convinced it is correct. If you can recommend any good books or
papers on low-level concurrency techniques, please drop me an <a href="mailto:marijnh@gmail.com">e-mail</a>.)

</p>
<p>In the book <a href="http://www.lindaspaces.com/book">How to
Write Parallel Programs</a>, which is old (1992) but still
relevant, the authors distinguish three models of concurrency:
Message passing (as in Erlang), shared or distributed data
structures (as in Java), and &#39;live&#39; data structures, where
computations turn into values after they finish running. These are
all fundamentally equivalent, in that a program using one of them
can always be transformed to use another, but some programs are
much more natural when expressed in the right model. STM, which
had not been invented at the time the book was written, would
probably qualify as a special case of shared data structures.

</p>
<p>One of these models, live data structures, has never been very
popular. This might be related to the fact that they offer none of
the control-flow advantages that the other models have —
you spawn a process, and then later you can read the value it
produced, but this only buys you something when there is a direct
advantage to computing values in parallel. On single-core
machines, there isn&#39;t, but on multicores, this might be a very
pleasant way to speed up some CPU-bound programs. On first seeing
Haskell&#39;s <code>par</code> operator, which implements something
like this, I was duly impressed. You just pass two computations to
a little operator and, under the right circumstances, you get your
results twice as fast.

</p>
<p>Now, without further ado, I&#39;d like to present my new library:
PCall (for parallel call). It implements a thread pool and a few
simple operators to get behaviour not unlike that of Haskell&#39;s
<code>par</code>. As a silly example, it can get two seconds worth
of sleep in only a single second!

</p>
<pre><code class="lang-commonlisp"><span class="cm-bracket">(</span><span class="cm-variable">time</span> <span class="cm-bracket">(</span><span class="cm-variable">let</span> <span class="cm-bracket">(</span><span class="cm-bracket">(</span><span class="cm-variable">a</span> <span class="cm-bracket">(</span><span class="cm-variable">pexec</span> <span class="cm-bracket">(</span><span class="cm-variable">sleep</span> <span class="cm-number">1</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
            <span class="cm-bracket">(</span><span class="cm-variable">b</span> <span class="cm-bracket">(</span><span class="cm-variable">pexec</span> <span class="cm-bracket">(</span><span class="cm-variable">sleep</span> <span class="cm-number">1</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span>
        <span class="cm-bracket">(</span><span class="cm-variable">join</span> <span class="cm-variable">a</span><span class="cm-bracket">)</span>
        <span class="cm-bracket">(</span><span class="cm-variable">join</span> <span class="cm-variable">b</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span><span class="cm-bracket">)</span></code></pre>
<p>The code behind this is rather humble and simple, but it seems
to work well. See the <a href="http://marijn.haverbeke.nl/pcall">project page</a> for more
details and examples.

</p>
<p>This kind of &#39;local parallelism&#39; makes it relatively easy to
verify that the tasks are using their data in a safe way —
you typically just make sure that no tasks write to the same
location or read anything another task might write.

</p>
<p>One issue that keeps coming up with this style of parallelism,
an issue that the book I mentioned above also discusses, is
finding the right granularity when splitting up tasks. Wrapping up
a computation in a function, putting it into a queue, having some
thread find it and execute it, and then reading out the results...
that is obviously more work than just directly executing the
computation. Thus, if the computation is small enough, you are
making your program slower by parallelising it.

</p>
<p>The solution suggested by the book is to provide a &#39;granularity
knob&#39; — some setting that controls the size of the
computation chunks that get delegated off to other processes. When
mapping some function over a list, you could for example provide a
way to control the amount of elements each task takes care of, and
vary that based on the amount of available processors and the
amount of computation the given function requires. In some cases,
the granularity adjustment could be done automatically by
profiling the running code. I guess that is usually more trouble
than it is worth, though.

</p>
<p>There are also situations where different environments call for
completely different approaches. Having a central lock on
something works well when there are ten threads occasionally
accessing it, but becomes a bottleneck when there are a thousand.
Optimistic transactions that fail when another thread interferes
with their data have the same problem: They fall apart when there
are too many processes. On the other hand, complex schemes that
minimise the amount of conflict between threads also carry an
overhead, and are often counterproductive when there are only a
handful of threads. This is a less pleasant side of concurrent
programming: There often is no right solution. In sequential
programs, you can weight program complexity against efficiency,
and often feel you&#39;ve hit some sweet spot. In concurrent programs,
the sweet spot on my dual-core system might be completely stupid
on both an old single-core system and a flashy sixteen-core
server.

</p>
<p>Despite of this, and the claims by various people that
threading is &#39;just too hard&#39;, I rather suspect we&#39;ll be able to
work it out. As in other complicated fields, it is mostly a matter
of finding better abstractions. I hope <a href="http://marijn.haverbeke.nl/pcall">PCall</a> can provide an
abstraction suitable for some problems (though, at this point, I&#39;m
not even a hundred percent convinced there are no race conditions
left in the library... do help me test it).
</p>

      ]]></content>
    </entry>
  
    
    <entry>
      <title>Continuation-Passing Style, and why JavaScript developers might be interested in it</title>
      <link rel="alternate" type="text/html" href="http://marijnhaverbeke.nl/cps/"/>
      <id>http://marijnhaverbeke.nl/cps/</id>
      <updated>2007-07-24T00:00:00+01:00</updated>
      <category term="javascript"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>Read this post at <a href="http://marijnhaverbeke.nl/cps/">http://marijnhaverbeke.nl/cps/</a>.</p>
      ]]></content>
    </entry>
  
    
    <entry>
      <title>Implementing a Syntax-Highlighting JavaScript Editor—In JavaScript</title>
      <link rel="alternate" type="text/html" href="http://codemirror.net/1/story.html"/>
      <id>http://codemirror.net/1/story.html</id>
      <updated>2007-05-24T00:00:00+01:00</updated>
      <category term="javascript"/><category term="codemirror"/>
      <content type="html" xml:base="http://marijnhaverbeke.nl/blog/"><![CDATA[
        <p>Read this post at <a href="http://codemirror.net/1/story.html">http://codemirror.net/1/story.html</a>.</p>
      ]]></content>
    </entry>
  
</feed>
